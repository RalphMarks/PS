{"version":3,"sources":["utils/history.js","reducers.js","utils/loadable.js","components/LoadingIndicator/Circle.js","components/LoadingIndicator/Wrapper.js","components/LoadingIndicator/index.js","containers/SecondPage/Loadable.js","containers/HomePage/Loadable.js","containers/ProductsPage/Loadable.js","containers/UltimateProduct/Loadable.js","containers/UltimateSingle/Loadable.js","containers/LoginPage/Loadable.js","containers/SignupPage/Loadable.js","containers/DashboardPage/Loadable.js","containers/UltimateEmployees/Loadable.js","containers/EmployeesPage/Loadable.js","containers/ProductPage/Loadable.js","containers/AnalyticsPage/Loadable.js","containers/FlowPage/Loadable.js","containers/CashRegisterPage/Loadable.js","utils/session.js","containers/LoginEmployeesPage/Loadable.js","containers/App/index.js","serviceWorker.js","localStorage.js","index.js","configureStore.js"],"names":["history","createBrowserHistory","basename","createReducer","injectedReducers","combineReducers","router","connectRouter","loadable","importFunc","fallback","LazyComponent","lazy","props","circleFadeDelay","keyframes","Circle","CirclePrimitive","styled","div","rotate","delay","Wrapper","LoadingIndicator","checkSession","localStorage","getItem","App","backend","HTML5Backend","className","exact","path","component","LoginPage","SignupPage","render","to","Boolean","window","location","hostname","match","store","initialState","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","createStore","runSaga","run","injectedSagas","configureStore","MOUNT_NODE","document","getElementById","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.253de0d3.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory({\n  basename: '/PS',\n});\nexport default history;","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport history from './utils/history';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}","import React, { lazy, Suspense } from 'react';\n\nconst loadable = (importFunc, { fallback = null } = { fallback: null }) => {\n  const LazyComponent = lazy(importFunc);\n\n  return props => (\n    <Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n\nexport default loadable;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { keyframes } from 'styled-components';\n\nconst circleFadeDelay = keyframes`\n  0%,\n  39%,\n  100% {\n    opacity: 0;\n  }\n\n  40% {\n    opacity: 1;\n  }\n`;\n\nconst Circle = props => {\n  const CirclePrimitive = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    ${props.rotate &&\n      `\n      -webkit-transform: rotate(${props.rotate}deg);\n      -ms-transform: rotate(${props.rotate}deg);\n      transform: rotate(${props.rotate}deg);\n    `} &:before {\n      content: '';\n      display: block;\n      margin: 0 auto;\n      width: 15%;\n      height: 15%;\n      background-color: #999;\n      border-radius: 100%;\n      animation: ${circleFadeDelay} 1.2s infinite ease-in-out both;\n      ${props.delay &&\n        `\n        -webkit-animation-delay: ${props.delay}s;\n        animation-delay: ${props.delay}s;\n      `};\n    }\n  `;\n  return <CirclePrimitive />;\n};\n\nCircle.propTypes = {\n  delay: PropTypes.number,\n  rotate: PropTypes.number,\n};\n\nexport default Circle;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin: 2em auto;\n  width: 40px;\n  height: 40px;\n  position: relative;\n`;\n\nexport default Wrapper;\n","import React from 'react';\n\nimport Circle from './Circle';\nimport Wrapper from './Wrapper';\n\nconst LoadingIndicator = () => (\n  <Wrapper>\n    <Circle />\n    <Circle rotate={30} delay={-1.1} />\n    <Circle rotate={60} delay={-1} />\n    <Circle rotate={90} delay={-0.9} />\n    <Circle rotate={120} delay={-0.8} />\n    <Circle rotate={150} delay={-0.7} />\n    <Circle rotate={180} delay={-0.6} />\n    <Circle rotate={210} delay={-0.5} />\n    <Circle rotate={240} delay={-0.4} />\n    <Circle rotate={270} delay={-0.3} />\n    <Circle rotate={300} delay={-0.2} />\n    <Circle rotate={330} delay={-0.1} />\n  </Wrapper>\n);\n\nexport default LoadingIndicator;\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from '../../utils/loadable';\nimport LoadingIndicator from '../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","const checkSession = () => {\n   return localStorage.getItem('PointOfSaleToken') !== null;\n}\n\nexport { checkSession };","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport React from 'react';\nimport loadable from './../../utils/loadable';\nimport LoadingIndicator from './../../components/LoadingIndicator';\n\nexport default loadable(() => import('./index'), {\n  fallback: <LoadingIndicator />,\n});","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router'\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nimport HomePage from './../HomePage/Loadable'\nimport SecondPage from './../SecondPage/Loadable'\nimport ProductsPage from './../ProductsPage/Loadable'\nimport UltimatePage from './../UltimateProduct/Loadable'\nimport UltimateSingle from './../UltimateSingle/Loadable'\nimport LoginPage from './../LoginPage/Loadable'\nimport SignupPage from './../SignupPage/Loadable'\nimport DashboardPage from './../DashboardPage/Loadable'\nimport EmployeesPage from './../EmployeesPage/Loadable'\nimport EmployeesUltimate from './../UltimateEmployees/Loadable'\nimport ProductPage from './../ProductPage/Loadable'\nimport AnalyticsPage from './../AnalyticsPage/Loadable'\nimport FlowPage from './../FlowPage/Loadable'\nimport CashRegisterPage from './../CashRegisterPage/Loadable'\n\nimport LoginEmployeesPage from './../LoginEmployeesPage/Loadable';\n\nimport { Redirect } from 'react-router'\nimport { checkSession } from './../../utils/session'\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={LoginPage} />\n          <Route path=\"/login\" component={LoginPage} />\n          <Route path=\"/signup\" component={SignupPage} />\n          <Route path=\"/dashboard\" render={() => checkSession() ? (<DashboardPage/>)    : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/employees\" render={() => checkSession() ? (<EmployeesUltimate/>)    : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/product\"   render={() => checkSession() ? (<ProductPage/>)      : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/analytics\" render={() => checkSession() ? (<AnalyticsPage/>)    : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/flow\"      render={() => checkSession() ? (<FlowPage/>)         : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/cash\"      render={() => checkSession() ? (<CashRegisterPage/>) : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/second\"    render={() => checkSession() ? (<SecondPage/>)       : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/products\"  render={() => checkSession() ? (<ProductsPage/>)     : (<Redirect to=\"/login\" />)} />\n          <Route exact path=\"/ultimate\"  render={() => checkSession() ? (<UltimatePage/>)     : (<Redirect to=\"/login\" />)} />\n          <Route path=\"/ultimate/:productId\"  render={(props) => checkSession() ? (<UltimateSingle {...props} />)     : (<Redirect to=\"/login\" />)} />\n        </Switch>\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (error) {\n    \n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport configureStore from './configureStore';\nimport App from './containers/App';\nimport history from './utils/history';\nimport * as serviceWorker from './serviceWorker';\nimport { loadState, saveState } from './localStorage';\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>\n  , MOUNT_NODE);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    createReducer(),\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}"],"sourceRoot":""}
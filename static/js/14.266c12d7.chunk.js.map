{"version":3,"sources":["containers/UltimateProduct/constants.js","containers/UltimateProduct/actions.js","containers/UltimateProduct/reducer.js","containers/UltimateProduct/selectors.js","containers/UltimateProduct/saga.js","containers/UltimateProduct/index.js","utils/checkStore.js","utils/serverURL.js","utils/reducerInjectors.js","utils/injectReducer.js","components/Navbar/index.js","utils/request.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","components/Modal/index.js"],"names":["LOAD_PRODUCTS","SAVE_PRODUCT","CREATE_PRODUCT","MAKE_FORM_VISIBLE","CHANGE_PRODUCT_NAME","CHANGE_PRODUCT_HAS_PRICE","CHANGE_PRODUCT_PRICE","createProduct","product","type","initialState","products","isCreatePrdFormVisible","productName","productHasPrice","productPrice","productsReducer","state","action","produce","draft","name","hasPrice","price","concat","form","visibility","selectProducts","makeSelectNewProduct","createSelector","productsState","modifiers","sagaSaveProduct","sagaListener","select","requestURL","getServerUrl","token","localStorage","getItem","call","request","body","JSON","stringify","headers","method","authResponse","put","console","log","takeLatest","key","Product","href","_id","style","color","className","width","margin","class","formatType","map","modifier","ProductForm","onChangeProduct","onSaveProduct","makeFormVisible","id","data-dismiss","aria-label","onClick","aria-hidden","for","placeholder","value","onChange","evt","target","checked","marginTop","ProductPage","children","formStatus","onLoadProducts","useInjectReducer","reducer","useInjectSaga","saga","useEffect","axios","get","then","data","err","padding","Navbar","is_active","Modal","is_visible","isVisibleCreateProd","display","flexWrap","justifyContent","mapStateToProps","createStructuredSelector","newProduct","mapDispatchToProps","dispatch","loadProducts","property","changeProduct","withConnect","connect","compose","memo","checkStore","store","injectReducerFactory","isValid","invariant","isString","isEmpty","isFunction","Reflect","has","injectedReducers","replaceReducer","createReducer","getInjectors","injectReducer","context","React","useContext","ReactReduxContext","props","is_loggedIn","this","to","data-toggle","data-target","aria-controls","aria-expanded","cursor","removeItem","setState","Component","parseJSON","response","status","json","checkStatus","error","Error","statusText","url","options","fetch","DAEMON","ONCE_TILL_UNMOUNT","checkKey","injectSagaFactory","descriptor","args","newDescriptor","mode","hasSaga","injectedSagas","task","runSaga","ejectSagaFactory","cancel","injectSaga","ejectSaga","injectors","ReactDOM","createPortal","tabindex","role","aria-labelledby","aria-modal","opacity","backgroundColor","document"],"mappings":"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","file":"static/js/14.266c12d7.chunk.js","sourcesContent":["/*\n * ProductsConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const LOAD_PRODUCTS = 'ps/ProductsPage/LOAD_PRODUCTS';\nexport const SAVE_PRODUCT = 'ps/ProductsPage/SAVE_PRODUCT';\nexport const CREATE_PRODUCT = 'ps/ProductsPage/CREATE_PRODUCT';\nexport const MAKE_FORM_VISIBLE = 'ps/ProductsPage/MAKE_FORM_VISIBLE';\nexport const CHANGE_PRODUCT_NAME = 'ps/ProductsPage/CHANGE_PRODUCT_NAME';\nexport const CHANGE_PRODUCT_HAS_PRICE = 'ps/ProductsPage/CHANGE_PRODUCT_HAS_PRICE';\nexport const CHANGE_PRODUCT_PRICE = 'ps/ProductsPage/CHANGE_PRODUCT_PRICE';","/*\n * Product Actions\n *\n * Actions change things in your application\n * Since this boilerplate uses a uni-directional data flow, specifically redux,\n * we have these actions which are the only way your application interacts with\n * your application state. This guarantees that your state is up to date and nobody\n * messes it up weirdly somewhere.\n *\n * To add a new Action:\n * 1) Import your constant\n * 2) Add a function like this:\n *    export function yourAction(var) {\n *        return { type: YOUR_ACTION_CONSTANT, var: var }\n *    }\n */\n\nimport { \n  LOAD_PRODUCTS, \n  CREATE_PRODUCT,\n  SAVE_PRODUCT,\n  MAKE_FORM_VISIBLE,\n  CHANGE_PRODUCT_NAME,\n  CHANGE_PRODUCT_HAS_PRICE,\n  CHANGE_PRODUCT_PRICE,\n } from './constants';\n\n/**\n * Changes the input field of the form\n * @param  {array} products La lista de productos\n * @return {object} An action object with a type of CHANGE_USERNAME\n */\nexport function loadProducts(products) {\n  return {\n    type: LOAD_PRODUCTS,\n    products,\n  };\n}\n\n\n/**\n * \n * @param {object} product Instancia de producto\n * @return {object} An action object with a type of CREATE_PRODUCT\n */\nexport function createProduct(product) {\n  return {\n    type: CREATE_PRODUCT,\n    product,\n  };\n}\n\n/**\n * @return {object} An action object with a type of SAVE_PRODUCT\n */\nexport function saveProduct() {\n  return {\n    type: SAVE_PRODUCT,\n  };\n}\n\n/**\n * \n * @param {string} form Nombre del form para ser actualizado  \n * @param {boolean} visibility Visibilidad del form\n * @return {object} An action object with a type of MAKE_FORM_VISIBLE\n */\nexport function makeFormVisible(form, visibility){\n  return{\n    type: MAKE_FORM_VISIBLE,\n    form,\n    visibility,\n  };\n}\n\n/**\n * \n * @param {string} property product property to be change\n * * @param {string} value value to be change\n * @return {object} An action object with a type of CHANGE_PRODUCT_NAME or CHANGE_PRODUCT_PRICE\n */\nexport function changeProduct(property, value){\n  switch (property) {\n    case \"name\":\n      return { type: CHANGE_PRODUCT_NAME, name: value};\n    case \"hasPrice\":\n      return { type: CHANGE_PRODUCT_HAS_PRICE, hasPrice: value};\n    case \"price\":\n        return { type: CHANGE_PRODUCT_PRICE, price: value};\n  }\n}","/*\n * ProductReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\nimport { \n  CREATE_PRODUCT, \n  SAVE_PRODUCT,\n  LOAD_PRODUCTS, \n  MAKE_FORM_VISIBLE,\n  CHANGE_PRODUCT_NAME,\n  CHANGE_PRODUCT_HAS_PRICE,\n  CHANGE_PRODUCT_PRICE,\n} from './constants';\nimport { da } from 'date-fns/esm/locale';\n\n// The initial state of the App\nexport const initialState = {\n  products: [],\n  isCreatePrdFormVisible: false,\n  productName: '',\n  productHasPrice: false,\n  productPrice: 0,\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst productsReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n\n      case CHANGE_PRODUCT_NAME:\n        draft.productName = action.name;\n        break;\n      case CHANGE_PRODUCT_HAS_PRICE:\n        draft.productHasPrice = action.hasPrice;\n        draft.productPrice = 0;\n        break;\n      case CHANGE_PRODUCT_PRICE:\n        draft.productPrice = action.price;\n        break;\n      case LOAD_PRODUCTS:\n        draft.products = action.products;\n        break;\n      case SAVE_PRODUCT:\n        break;\n      case CREATE_PRODUCT:\n        draft.products = draft.products.concat([action.product]);\n        draft.productName = '';\n        draft.productPrice = '';\n        draft.isCreatePrdFormVisible = false;\n        break;\n\n      case MAKE_FORM_VISIBLE:\n        switch (action.form) {\n          case \"createProductForm\":            \n            draft.isCreatePrdFormVisible = action.visibility;\n            break;\n        }\n        break;\n    }\n  });\n\nexport default productsReducer;","/**\n * ProductPage selectors\n */\n\nimport { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectProducts = state => state.products || initialState;\n\nconst makeSelectProducts = () =>\n  createSelector(\n    selectProducts,\n    productsState => productsState.products,\n  );\n\nconst makeSelectProduct = () =>\n  createSelector(\n    selectProducts,\n    productsState => {\n      return{\n        name: productsState.productName,\n        hasPrice: productsState.productHasPrice,\n        price: productsState.productPrice,\n      };\n    },\n  );\n\nconst makeSelectNewProduct = () =>\n  createSelector(\n    selectProducts,\n    productsState => {\n      return {\n        name: productsState.productName,\n        modifiers: [],\n        type: 0,\n        price: productsState.productPrice,\n      };\n    },\n  );\n\nconst makeSelectFormVisibility = () =>\n  createSelector(\n    selectProducts,\n    productsState => {\n      return({\n        isVisibleCreateProd: productsState.isCreatePrdFormVisible,\n      });\n    },\n  );\n\nexport { makeSelectProducts, makeSelectProduct, makeSelectFormVisibility, makeSelectNewProduct };","import { getServerUrl } from './../../utils/serverURL';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { SAVE_PRODUCT } from './constants';\nimport { makeSelectNewProduct } from './selectors';\nimport { createProduct } from './actions';\nimport request from './../../utils/request';\nimport produce from 'immer';\n\nexport function* sagaSaveProduct() {\n  // Select username from store\n  const product = yield select(makeSelectNewProduct());\n  const requestURL = `${getServerUrl()}/products`;\n\n  try {\n    const token = localStorage.getItem(\"PointOfSaleToken\")\n    const authResponse = yield call(request, requestURL, {\n      body: JSON.stringify(product),\n      headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n      method: 'POST'\n    });\n\n    yield put(createProduct(authResponse)); \n    \n  } catch (err) {\n    console.log(\"err\")\n    console.log(err)\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* sagaListener() {\n  yield takeLatest(SAVE_PRODUCT, sagaSaveProduct);\n}","import React, {useEffect, memo} from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { getServerUrl } from './../../utils/serverURL';\nimport { createStructuredSelector } from 'reselect';\nimport { useInjectReducer } from './../../utils/injectReducer';\nimport { useInjectSaga } from './../../utils/injectSaga';\nimport Navbar from '../../components/Navbar';\nimport Modal from '../../components/Modal';\n\nimport { loadProducts, saveProduct, makeFormVisible, changeProduct } from './actions';\nimport { makeSelectProducts, makeSelectProduct, makeSelectFormVisibility, makeSelectNewProduct } from './selectors';\n\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst key = 'products';\n\nconst Product = ({product}) => {\n\n  const formatType = () => {\n    switch (product.price) {\n      case 0:\n        return \"Sin precio\"\n      default:\n        return `$ ${product.price}`\n    };\n  };\n\n  return(\n    <a href={`/PS/ultimate/${product._id}`} style={{color:\"black\"}}>\n      <div className=\"card\" style={{width: '240px', margin:'8px'}}>\n        <div class=\"modal-header\">\n          <span>{product.name}</span>\n          <span>{formatType()}</span>\n        </div>\n        <div className=\"card-body\">\n          {product.modifiers.map(modifier => {\n            return(\n              <div className=\"btn btn-dark\" style={{margin:\"4px\"}}>{modifier.name}</div>\n            );\n          })}\n        </div>\n      </div>\n    </a>\n  )\n}\n\nconst ProductForm = ({product, onChangeProduct, onSaveProduct, makeFormVisible}) => {\n  return(\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"exampleModalLiveLabel\">Crear Producto</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={() => makeFormVisible(\"createProductForm\", false)}>\n          <span aria-hidden=\"true\">×</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Nombre del Producto</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Nombre del Producto\" \n          value={product.name} \n          onChange={(evt) => onChangeProduct(\"name\", evt.target.value)}/>\n      </div>\n      <div class=\"form-check\">\n        <input\n          type=\"checkbox\" \n          class=\"form-check-input\" \n          checked={product.hasPrice}\n          onChange={(evt) => onChangeProduct(\"hasPrice\", evt.target.checked)}/>\n        <label class=\"form-check-label\" for=\"defaultCheck1\">\n          Tiene precio?\n        </label>\n      </div>\n      {product.hasPrice ?  \n        <div class=\"form-group\">\n          <label for=\"exampleInputEmail1\">Precio del producto</label>\n          <input \n            type=\"text\" \n            class=\"form-control\" \n            placeholder=\"Precio\" \n            value={product.price} \n            onChange={(evt) => onChangeProduct(\"price\", evt.target.value)}/>\n          \n        </div> \n        : null}\n      <div \n        className=\"btn btn-dark\" \n        style={{marginTop: \"8px\"}}\n        onClick={onSaveProduct}>\n          Crear Producto\n      </div>\n    </div>\n    </div>\n  );\n}\n\n\nexport function ProductPage({\n  products,\n  product,\n  formStatus,\n  onLoadProducts,\n  makeFormVisible,\n  onChangeProduct,\n  onSaveProduct\n}) {\n  let children;\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  useEffect(() => {\n\n    const requestURL = `${getServerUrl()}/products`;\n    try {\n      const token = localStorage.getItem(\"PointOfSaleToken\")\n\n      axios.get(requestURL, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n      .then(({ data }) => {\n        console.log(data.data);\n        onLoadProducts(data.data);\n      });\n\n    } catch (err) {\n      console.log(\"err\")\n      console.log(err)\n    }\n\n  }, []);\n\n  children =(\n    <ProductForm \n      product={product} \n      onChangeProduct={onChangeProduct} \n      onSaveProduct={onSaveProduct}\n      makeFormVisible={makeFormVisible} />\n  );\n\n  return (\n    <div className=\"container-fluid\" style={{padding: '0px'}}>\n      <Navbar is_active='product' />\n      <Modal is_visible={formStatus.isVisibleCreateProd} children={children} />\n      <div className=\"row justify-content-center\">\n        <div className=\"col-6\">\n          <h1>Productos</h1>\n        </div>\n        <div className=\"col-6\">\n          <div className=\"btn btn-dark\" style={{marginTop: \"12px\"}} onClick={() => makeFormVisible(\"createProductForm\", true)}>Crear Producto</div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-12\" style={{display:'flex', flexWrap:'wrap', justifyContent:'center'}}>\n          {products.map(product => \n            <Product \n              product={product} \n              makeFormVisible={makeFormVisible}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nProductPage.propTypes = {\n  products: PropTypes.array,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  products: makeSelectProducts(),\n  product: makeSelectProduct(),\n  formStatus: makeSelectFormVisibility(),\n  newProduct: makeSelectNewProduct(),\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    onLoadProducts: (products) => dispatch(loadProducts(products)),\n    makeFormVisible: (form, visibility) => dispatch(makeFormVisible(form, visibility)),\n    onChangeProduct: (property, value) => dispatch(changeProduct(property, value)),\n    onSaveProduct: () => dispatch(saveProduct()),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\n\nexport default compose(\n  withConnect,\n  memo,\n)(ProductPage);\n","/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  return true;\n}","const getServerUrl = () => {\n  return \"https://5ec3621d.ngrok.io\";\n}\n\nexport { getServerUrl };","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from './../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  };\n}","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };","import React from 'react'\nimport { Redirect } from 'react-router';\nimport { Link } from \"react-router-dom\";\n\n\nclass Navbar extends React.Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      is_loggedIn: true,\n    }\n  }\n  \n\n  render(){\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        {this.state.is_loggedIn ? null : <Redirect to=\"/PS/login\" /> }\n        <a className=\"navbar-brand\" href=\"#\">PS</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className={(this.props.is_active === 'dashboard') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/dashboard\">Dashboard</a>\n            </li>\n            <li className={(this.props.is_active === 'employees') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/employees\">Employees</a>\n            </li>\n            <li className={(this.props.is_active === 'product') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/ultimate\">Products</a>\n            </li>\n            <li className={(this.props.is_active === 'analytics') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/analytics\">Analytics</a>\n            </li>\n            <li className={(this.props.is_active === 'flow') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/flow\">Flujo</a>\n            </li>\n            <li className={(this.props.is_active === 'cash') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/cash\">Caja</a>\n            </li>\n          </ul>\n          <span className=\"navbar-text\" style={{cursor: \"pointer\"}} onClick={() => {\n            localStorage.removeItem(\"PointOfSaleToken\");\n           this.setState({is_loggedIn: false});\n          }}>\n            Cerrar Sesión\n          </span>\n        </div>\n      </nav>\n    )\n  }\n\n}\n\nexport default Navbar;\n\n","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n  invariant(\n    isString(key) && !isEmpty(key),\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\n  );\n\nconst checkDescriptor = descriptor => {\n  const shape = {\n    saga: isFunction,\n    mode: mode => isString(mode) && allowedModes.includes(mode),\n  };\n  invariant(\n    conformsTo(descriptor, shape),\n    '(src/utils...) injectSaga: Expected a valid saga descriptor',\n  );\n};\n\nexport function injectSagaFactory(store, isValid) {\n  return function injectSaga(key, descriptor = {}, args) {\n    if (!isValid) checkStore(store);\n\n    const newDescriptor = {\n      ...descriptor,\n      mode: descriptor.mode || DAEMON,\n    };\n    const { saga, mode } = newDescriptor;\n\n    checkKey(key);\n    //checkDescriptor(newDescriptor);\n\n    let hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      const oldDescriptor = store.injectedSagas[key];\n      // enable hot reloading of daemon and once-till-unmount sagas\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (\n      !hasSaga ||\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n    ) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = {\n        ...newDescriptor,\n        task: store.runSaga(saga, args),\n      };\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      const descriptor = store.injectedSagas[key];\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel();\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n        }\n      }\n    }\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true),\n  };\n}\n","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };","import React from 'react'\nimport ReactDOM from 'react-dom';\nfunction Modal({is_visible, children}) {\n  return ReactDOM.createPortal(\n    <div class=\"modal show fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLiveLabel\" aria-modal=\"true\" style={{display: is_visible ? \"block\" : \"none\", opacity:is_visible ? 1 : 0, backgroundColor:\"rgba(0,0,0,0.5)\"}}>\n      <div class=\"modal-dialog\" role=\"document\">\n        {children}\n      </div>\n    </div>,\n    document.body\n  );\n}\n\nexport default Modal;\n"],"sourceRoot":""}
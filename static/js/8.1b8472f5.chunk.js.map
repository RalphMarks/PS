{"version":3,"sources":["components/Img/index.js","containers/UltimateEmployees/Search.svg","containers/UltimateEmployees/constants.js","containers/UltimateEmployees/actions.js","containers/UltimateEmployees/reducer.js","containers/UltimateEmployees/selectors.js","containers/UltimateEmployees/saga.js","containers/UltimateEmployees/index.js","utils/checkStore.js","utils/serverURL.js","utils/reducerInjectors.js","utils/injectReducer.js","components/Navbar/index.js","utils/request.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","components/Modal/index.js"],"names":["Img","props","className","src","alt","style","module","exports","LOAD_EMPLOYEES","SAVE_EMPLOYEE","CREATE_EMPLOYEE","CHANGE_VISIBILITY","CHANGE_EMPLOYEE_NAME","CHANGE_EMPLOYEE_EMAIL","CHANGE_EMPLOYEE_PHONE","CHANGE_EMPLOYEE_BIRTHDAY","DELETE_EMPLOYEE","DELETED_EMPLOYEE","SELECT_EMPLOYEE","UPDATE_EMPLOYEE_NAME","UPDATE_EMPLOYEE_EMAIL","UPDATE_EMPLOYEE_PHONE","UPDATE_EMPLOYEE_BIRTHDAY","UPDATE_EMPLOYEE","UPDATED_EMPLOYEE","CHANGE_FILTER","createEmployee","employee","type","initialState","employees","isCreatePrdFormVisible","name","email","phone","birthday","Date","is_crtForm_visible","is_updtForm_visible","selected_employee","_id","filter","productsReducer","state","action","produce","draft","concat","who","visibility","find","e","e_index","findIndex","splice","updt_index","selectEmp","makeSelectNewEmployee","createSelector","empState","makeSelectSelectedEmployee","sagaSaveEmployee","sagaDeleteEmployee","sagaUpdateEmployee","sagaListener","select","requestURL","getServerUrl","token","localStorage","getItem","call","request","body","JSON","stringify","headers","method","saved_employee","put","console","log","s_employee","deleted_employee","updated_employee","takeLatest","key","registerLocale","es","EmployeeForm","new_employee","onChangeEmployee","onSaveEmployee","changeVisibility","class","onClick","aria-hidden","for","placeholder","value","onChange","evt","target","locale","showMonthDropdown","showYearDropdown","selected","onSelect","date","marginTop","UpdateForm","onUpdateEmployee","onUpdateSelected","Table","onDeleteEmployee","onSelectEmployee","map","border","scope","toLocaleDateString","status","height","cursor","margin","mapStateToProps","createStructuredSelector","form_visibility","crtForm","updtForm","selected_empoyee","filtered_employees","employeesState","startsWith","mapDispatchToProps","dispatch","onLoadEmployees","loadEmployees","form","property","changeEmployee","updateEmployee","id","onChangeFilter","withConnect","connect","compose","memo","children","children2","useInjectReducer","reducer","useInjectSaga","saga","useEffect","axios","get","then","data","err","padding","Navbar","is_active","Modal","is_visible","position","top","right","width","zIndex","Search","heigth","backgroundColor","borderRadius","boxShadow","color","fontSize","lineHeight","borderBottom","borderTop","checkStore","store","injectReducerFactory","isValid","invariant","isString","isEmpty","isFunction","Reflect","has","injectedReducers","replaceReducer","createReducer","getInjectors","injectReducer","context","React","useContext","ReactReduxContext","is_loggedIn","this","to","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","removeItem","setState","Component","parseJSON","response","json","checkStatus","error","Error","statusText","url","options","fetch","DAEMON","ONCE_TILL_UNMOUNT","checkKey","injectSagaFactory","descriptor","args","newDescriptor","mode","hasSaga","injectedSagas","task","runSaga","ejectSagaFactory","cancel","injectSaga","ejectSaga","injectors","ReactDOM","createPortal","tabindex","role","aria-labelledby","aria-modal","display","opacity","document"],"mappings":"8FAAA,oBAqBeA,IAXf,SAAaC,GACX,OAAO,yBAAKC,UAAWD,EAAMC,UAAWC,IAAKF,EAAME,IAAKC,IAAKH,EAAMG,IAAKC,MAAOJ,EAAMI,U,oBCXvFC,EAAOC,QAAU,IAA0B,oC,qHCW9BC,EAAiB,oCACjBC,EAAgB,mCAChBC,EAAkB,qCAClBC,EAAoB,uCACpBC,EAAuB,0CACvBC,EAAwB,2CACxBC,EAAwB,2CACxBC,EAA2B,8CAC3BC,EAAkB,qCAClBC,EAAmB,sCACnBC,EAAkB,qCAClBC,EAAuB,0CACvBC,EAAwB,2CACxBC,EAAwB,2CACxBC,EAA2B,8CAC3BC,EAAkB,qCAClBC,EAAmB,sCACnBC,EAAgB,mCCsCtB,SAASC,EAAeC,GAC7B,MAAO,CACLC,KAAMlB,EACNiB,Y,YCpCSE,EAAe,CAC1BC,UAAW,GACXC,wBAAwB,EACxBC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,SAAU,IAAIC,KACdC,oBAAoB,EACpBC,qBAAqB,EACrBC,kBAAmB,CACjBC,IAAK,UACLR,KAAK,GACLC,MAAM,GACNC,MAAM,GACNC,SAAU,IAAIC,MAEhBK,OAAO,IAqFMC,EAjFS,eAACC,EAAD,uDAASd,EAAce,EAAvB,8CACtBC,YAAQF,GAAO,SAAAG,GACb,OAAQF,EAAOhB,MACb,KAAKpB,EACHsC,EAAMhB,UAAYc,EAAOd,UACzB,MACF,KAAKrB,EACH,MACF,KAAKC,EACHoC,EAAMhB,UAAYgB,EAAMhB,UAAUiB,OAAO,CAACH,EAAOjB,WACjDmB,EAAMd,KAAO,GACbc,EAAMb,MAAQ,GACda,EAAMZ,MAAQ,GACdY,EAAMX,SAAW,IAAIC,KACrBU,EAAMT,oBAAqB,EAC3B,MAEF,KAAK1B,EACH,OAAQiC,EAAOI,KACb,IAAK,UACHF,EAAMT,mBAAqBO,EAAOK,WAClC,MACF,IAAK,WACHH,EAAMR,oBAAsBM,EAAOK,WAGvC,MACF,KAAKrC,EACHkC,EAAMd,KAAOY,EAAOZ,KACpB,MACF,KAAKnB,EACHiC,EAAMb,MAAQW,EAAOX,MACrB,MACF,KAAKnB,EACHgC,EAAMZ,MAAQU,EAAOV,MACrB,MACF,KAAKnB,EACH+B,EAAMX,SAAWS,EAAOT,SACxB,MAEF,KAAKnB,EACH8B,EAAMP,kBAAoBO,EAAMhB,UAAUoB,MAAK,SAAAC,GAAC,OAAIA,EAAEX,MAAQI,EAAOJ,OACrE,MACF,KAAKvB,EACH,IAAImC,EAAUN,EAAMhB,UAAUuB,WAAU,SAAAF,GAAC,OAAIA,EAAEX,MAAQI,EAAOjB,SAASa,OACvEM,EAAMhB,UAAUwB,OAAO,EAAGF,GAC1B,MACF,KAAKlC,EACH4B,EAAMP,kBAAoBO,EAAMhB,UAAUoB,MAAK,SAAAC,GAAC,OAAIA,EAAEX,MAAQI,EAAOJ,OACrE,MAEF,KAAKrB,EACH2B,EAAMP,kBAAkBP,KAAOY,EAAOZ,KACtC,MAEF,KAAKZ,EACH0B,EAAMP,kBAAkBN,MAAQW,EAAOX,MACvC,MAEF,KAAKZ,EACHyB,EAAMP,kBAAkBL,MAAQU,EAAOV,MACvC,MAEF,KAAKZ,EACHwB,EAAMP,kBAAkBJ,SAAWS,EAAOT,SAC1C,MAEF,KAAKZ,EACH,MACF,KAAKC,EACH,IAAI+B,EAAaT,EAAMhB,UAAUuB,WAAU,SAAAF,GAAC,OAAIA,EAAEX,MAAQI,EAAOjB,SAASa,OAC1EM,EAAMhB,UAAUyB,GAAcX,EAAOjB,SACrCmB,EAAMR,qBAAsB,EAC5B,MAEF,KAAKb,EACHqB,EAAML,OAASG,EAAOH,YC1HxBe,EAAY,SAAAb,GAAK,OAAIA,EAAMb,WAAaD,GA0BxC4B,EAAwB,kBAC5BC,YACEF,GACA,SAAAG,GACE,MAAO,CACL3B,KAAM2B,EAAS3B,KACfC,MAAO0B,EAAS1B,MAChBC,MAAOyB,EAASzB,MAChBC,SAAUwB,EAASxB,cAgBrByB,EAA6B,kBACjCF,YACEF,GACA,SAAAG,GAAQ,OAAIA,EAASpB,sB,mICpDRsB,I,WAqBAC,I,WAsBAC,I,WAyBQC,IApElB,SAAUH,KAAV,6EAEY,OAFZ,SAEkBI,YAAOR,KAFzB,OAOoB,OALnB9B,EAFD,OAGCuC,EAHD,UAGiBC,cAHjB,uBAMGC,EAAQC,aAAaC,QAAQ,oBANhC,SAO0BC,YAAKC,IAASN,EAAY,CACrDO,KAAMC,KAAKC,UAAUhD,GACrBiD,QAAS,CAAC,eAAgB,mBAAoB,cAAgB,UAAhB,OAA2BR,IACzES,OAAQ,SAVP,OAaH,OANMC,EAPH,iBAaGC,YAAIrD,EAAeoD,IAbtB,0DAgBHE,QAAQC,IAAI,OACZD,QAAQC,IAAR,MAjBG,sDAqBA,SAAUnB,KAAV,6EAEc,OAFd,SAEoBG,YAAOL,KAF3B,OAOsB,OALrBsB,EAFD,OAGChB,EAHD,UAGiBC,cAHjB,sBAG6Ce,EAAW1C,KAHxD,SAMG4B,EAAQC,aAAaC,QAAQ,oBANhC,SAO4BC,YAAKC,IAASN,EAAY,CACvDO,KAAMC,KAAKC,UAAUO,GACrBN,QAAS,CAAC,eAAgB,mBAAoB,cAAgB,UAAhB,OAA2BR,IACzES,OAAQ,WAVP,OAcH,OAPMM,EAPH,OAYHH,QAAQC,IAAIE,GAZT,UAcGJ,YHkFD,CACLnD,KAAMX,EACNU,SGpF0BwD,IAdvB,0DAiBHH,QAAQC,IAAI,OACZD,QAAQC,IAAR,MAlBG,sDAsBA,SAAUlB,KAAV,6EAEc,OAFd,SAEoBE,YAAOL,KAF3B,OAOsB,OALrBsB,EAFD,OAGChB,EAHD,UAGiBC,cAHjB,sBAG6Ce,EAAW1C,KAHxD,SAMG4B,EAAQC,aAAaC,QAAQ,oBANhC,SAO4BC,YAAKC,IAASN,EAAY,CACvDO,KAAMC,KAAKC,UAAUO,GACrBN,QAAS,CAAC,eAAgB,mBAAoB,cAAgB,UAAhB,OAA2BR,IACzES,OAAQ,UAVP,OAcH,OAPMO,EAPH,OAYHJ,QAAQC,IAAIG,GAZT,UAcGL,YHmHD,CACLnD,KAAMJ,EACNG,SGrH0ByD,IAdvB,0DAiBHJ,QAAQC,IAAI,OACZD,QAAQC,IAAR,MAlBG,sDAyBQ,SAAUjB,KAAV,iEACb,OADa,SACPqB,YAAW5E,EAAeoD,IADnB,OAEb,OAFa,SAEPwB,YAAWrE,EAAiB8C,IAFrB,OAGb,OAHa,SAGPuB,YAAW9D,EAAiBwC,IAHrB,uCC5Ef,oDAuBA,IAAMuB,GAAM,YACZC,yBAAe,KAAMC,KAErB,IAAMC,GAAe,SAAC,GAAwE,IAAvEC,EAAsE,EAAtEA,aAAcC,EAAwD,EAAxDA,iBAAkBC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,iBACrE,OACE,yBAAKC,MAAM,iBACT,yBAAKA,MAAM,gBACT,wBAAIA,MAAM,eAAV,kBACA,4BAAQlE,KAAK,SAASkE,MAAM,QAAQC,QAAS,kBAAMF,EAAiB,WAAW,KAC7E,0BAAMG,cAAY,QAAlB,UAGJ,yBAAKF,MAAM,cACX,yBAAKA,MAAM,cACT,2BAAOG,IAAI,sBAAX,aACA,2BACErE,KAAK,OACLkE,MAAM,eACNI,YAAY,YACZC,MAAOT,EAAa1D,KACpBoE,SAAU,SAACC,GAAD,OAASV,EAAiB,OAAQU,EAAIC,OAAOH,WAE3D,yBAAKL,MAAM,cACT,2BAAOG,IAAI,sBAAX,SACA,2BACErE,KAAK,OACLkE,MAAM,eACNI,YAAY,QACZC,MAAOT,EAAazD,MACpBmE,SAAU,SAACC,GAAD,OAASV,EAAiB,QAASU,EAAIC,OAAOH,WAE5D,yBAAKL,MAAM,cACT,2BAAOG,IAAI,sBAAX,eACA,2BACErE,KAAK,OACLkE,MAAM,eACNI,YAAY,cACZC,MAAOT,EAAaxD,MACpBkE,SAAU,SAACC,GAAD,OAASV,EAAiB,QAASU,EAAIC,OAAOH,WAE5D,yBAAKjG,UAAU,cACT,sDADN,IACyC,6BACnC,kBAAC,IAAD,CACEqG,OAAO,KACPrG,UAAU,eACVsG,mBAAiB,EACjBC,kBAAgB,EAChBC,SAAU,IAAItE,KAAKsD,EAAavD,UAChCwE,SAAU,SAACC,GAAUjB,EAAiB,WAAYiB,OAG1D,yBACE1G,UAAU,eACVG,MAAO,CAACwG,UAAW,OACnBd,QAASH,GAHX,qBAWAkB,GAAa,SAAC,GAAsE,IAArEnF,EAAoE,EAApEA,SAAUkE,EAA0D,EAA1DA,iBAAkBkB,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,iBACjE,OACE,yBAAKlB,MAAM,iBACT,yBAAKA,MAAM,gBACT,wBAAIA,MAAM,eAAV,kBACA,4BAAQlE,KAAK,SAASkE,MAAM,QAAQC,QAAS,kBAAMF,EAAiB,YAAY,KAC9E,0BAAMG,cAAY,QAAlB,UAGJ,yBAAKF,MAAM,cACX,yBAAKA,MAAM,cACT,2BAAOG,IAAI,sBAAX,aACA,2BACErE,KAAK,OACLkE,MAAM,eACNI,YAAY,YACZC,MAAOxE,EAASK,KAChBoE,SAAU,SAACC,GAAD,OAASU,EAAiB,OAAQV,EAAIC,OAAOH,WAE3D,yBAAKL,MAAM,cACT,2BAAOG,IAAI,sBAAX,SACA,2BACErE,KAAK,OACLkE,MAAM,eACNI,YAAY,QACZC,MAAOxE,EAASM,MAChBmE,SAAU,SAACC,GAAD,OAASU,EAAiB,QAASV,EAAIC,OAAOH,WAE5D,yBAAKL,MAAM,cACT,2BAAOG,IAAI,sBAAX,eACA,2BACErE,KAAK,OACLkE,MAAM,eACNI,YAAY,cACZC,MAAOxE,EAASO,MAChBkE,SAAU,SAACC,GAAD,OAASU,EAAiB,QAASV,EAAIC,OAAOH,WAE5D,yBAAKjG,UAAU,cACT,sDADN,IACyC,6BACnC,kBAAC,IAAD,CACEqG,OAAO,KACPrG,UAAU,eACVsG,mBAAiB,EACjBC,kBAAgB,EAChBC,SAAU,IAAItE,KAAKT,EAASQ,UAC5BwE,SAAU,SAACC,GAAUG,EAAiB,WAAYH,OAG1D,yBACE1G,UAAU,eACVG,MAAO,CAACwG,UAAW,OACnBd,QAASiB,GAHX,0BAWAC,GAAQ,SAAC,GAAuE,IAAtEnF,EAAqE,EAArEA,UAAW+D,EAA0D,EAA1DA,iBAAkBqB,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,iBAC7D,OACErF,EAAUsF,KAAI,SAAAjE,GACZ,OACE,4BACA,wBAAI9C,MAAO,CAACgH,OAAO,QAASC,MAAM,OAAOnE,EAAEX,KAC3C,wBAAInC,MAAO,CAACgH,OAAO,SAAUlE,EAAEnB,MAC/B,wBAAI3B,MAAO,CAACgH,OAAO,SAAUlE,EAAElB,OAC/B,wBAAI5B,MAAO,CAACgH,OAAO,SAAUlE,EAAEjB,OAC/B,wBAAI7B,MAAO,CAACgH,OAAO,SAAiC,kBAAhBlE,EAAEhB,SAAyBgB,EAAEhB,SAASoF,mBAAmB,SAAW,IAAInF,KAAKe,EAAEhB,UAAUoF,sBAC7H,wBAAIlH,MAAO,CAACgH,OAAO,SAAuB,IAAblE,EAAEqE,OAAe,0BAAM1B,MAAM,yBAAZ,YAAsD,0BAAMA,MAAM,yBAAZ,WACpG,wBAAIzF,MAAO,CAACgH,OAAO,SACjB,yBAAKlH,IAAI,QAAQE,MAAO,CAACoH,OAAO,OAAQC,OAAO,UAAWC,OAAO,SAAU5B,QAAS,WAClFoB,EAAiBhE,EAAEX,KACnBqD,EAAiB,YAAY,MAE/B,yBAAK1F,IAAI,QAAQE,MAAO,CAACoH,OAAO,OAAQC,OAAO,UAAWC,OAAO,SAAU5B,QAAS,WAClFmB,EAAiB/D,EAAEX,cA+H/B,IAAMoF,GAAkBC,YAAyB,CAC/C/F,UFvRA4B,YACEF,GACA,SAAAG,GAAQ,OAAIA,EAAS7B,aEsRvBgG,gBFnPApE,YACEF,GACA,SAAAG,GACE,MAAO,CACLoE,QAASpE,EAAStB,mBAClB2F,SAAUrE,EAASrB,wBE+OzBoD,aAAcjC,IACdwE,iBAAkBrE,IAClBnB,OFrOAiB,YACEF,GACA,SAAAG,GAAQ,OAAIA,EAASlB,UEoOvByF,mBFtRAxE,YACEF,GACA,SAAA2E,GAAc,OAAIA,EAAerG,UAAUW,QAAO,SAAAd,GAAQ,OAAIA,EAASK,KAAKoG,WAAWD,EAAe1F,gBEuRnG,SAAS4F,GAAmBC,GACjC,MAAO,CACLC,gBAAiB,SAACzG,GAAD,OAAewG,EJhQ7B,SAAuBxG,GAC5B,MAAO,CACLF,KAAMpB,EACNsB,aI6PyC0G,CAAc1G,KACvD+D,iBAAkB,SAAC4C,EAAMxF,GAAP,OAAsBqF,EJ9NrC,SAA0BtF,EAAKC,GACpC,MAAO,CACLrB,KAAMjB,EACNqC,MACAC,cI0NiD4C,CAAiB4C,EAAMxF,KACxE0C,iBAAkB,SAAC+C,EAAUvC,GAAX,OAAqBmC,EJhNpC,SAAwBI,EAAUvC,GACvC,OAAQuC,GACN,IAAK,OACL,MAAO,CAAE9G,KAAMhB,EAAsBoB,KAAMmE,GAC3C,IAAK,QACL,MAAO,CAAEvE,KAAMf,EAAuBoB,MAAOkE,GAC7C,IAAK,QACL,MAAO,CAAEvE,KAAMd,EAAuBoB,MAAOiE,GAC7C,IAAK,WACL,MAAO,CAAEvE,KAAMb,EAA0BoB,SAAUgE,IIuMHwC,CAAeD,EAAUvC,KACzEY,iBAAkB,SAAC2B,EAAUvC,GAAX,OAAqBmC,EJzJpC,SAAwBI,EAAUvC,GACvC,OAAQuC,GACN,IAAK,OACL,MAAO,CAAE9G,KAAMT,EAAsBa,KAAMmE,GAC3C,IAAK,QACL,MAAO,CAAEvE,KAAMR,EAAuBa,MAAOkE,GAC7C,IAAK,QACL,MAAO,CAAEvE,KAAMP,EAAuBa,MAAOiE,GAC7C,IAAK,WACL,MAAO,CAAEvE,KAAMN,EAA0Ba,SAAUgE,IIgJHyC,CAAeF,EAAUvC,KACzEP,eAAgB,kBAAM0C,EJxPjB,CACL1G,KAAMnB,KIwPNyG,iBAAkB,SAAC2B,GAAD,OAAQP,EJhMrB,CACL1G,KAAMZ,EACNwB,II8LkDqG,KAClD1B,iBAAkB,SAAC0B,GAAD,OAAQP,EJzKrB,CACL1G,KAAMV,EACNsB,IIuKkDqG,KAClD7B,iBAAkB,kBAAMsB,EJ1InB,CACL1G,KAAML,KI0INuH,eAAgB,SAACzC,GAAD,OAASiC,GJpHA7F,EIoHsB4D,EAAIC,OAAOH,MJnHrD,CACLvE,KAAMH,EACNgB,YAHG,IAAsBA,IIwH7B,IAAMsG,GAAcC,YAClBpB,GACAS,IAIaY,sBACbF,GACAG,OAFaD,EApJf,YAgBI,IACEE,EACAC,EAjBJtH,EAeC,EAfDA,UACAgG,EAcC,EAdDA,gBACApC,EAaC,EAbDA,aACAuC,EAYC,EAZDA,iBACAxF,EAWC,EAXDA,OACAyF,EAUC,EAVDA,mBACAK,EASC,EATDA,gBACA1C,EAQC,EARDA,iBACAF,EAOC,EAPDA,iBACAC,EAMC,EANDA,eACAsB,EAKC,EALDA,iBACAC,EAIC,EAJDA,iBACAJ,EAGC,EAHDA,iBACAC,EAEC,EAFDA,iBACA8B,EACC,EADDA,eA2CA,OAvCAO,YAAiB,CAAE/D,OAAKgE,YACxBC,YAAc,CAAEjE,OAAKkE,UAErBC,qBAAU,WAER,IAAMvF,EAAU,UAAMC,cAAN,cAChB,IACE,IAAMC,EAAQC,aAAaC,QAAQ,oBAEnCoF,IAAMC,IAAIzF,EAAY,CACpBU,QAAS,CAAC,cAAgB,UAAhB,OAA2BR,MAEtCwF,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPtB,EAAgBsB,EAAKA,SAGvB,MAAOC,GACP9E,QAAQC,IAAI,OACZD,QAAQC,IAAI6E,MAGb,IAEHX,EACE,kBAAC,GAAD,CACEzD,aAAcA,EACdC,iBAAkBA,EAClBC,eAAgBA,EAChBC,iBAAkBA,IAGtBuD,EACE,kBAAC,GAAD,CACEvD,iBAAkBA,EAClBlE,SAAUsG,EACVlB,iBAAkBA,EAClBC,iBAAkBA,IAIpB,yBAAK9G,UAAU,kBAAkBG,MAAO,CAAC0J,QAAS,QAChD,kBAACC,EAAA,EAAD,CAAQC,UAAU,cAClB,kBAACC,EAAA,EAAD,CAAOC,WAAYrC,EAAgBC,QAASoB,SAAUA,IACtD,kBAACe,EAAA,EAAD,CAAOC,WAAYrC,EAAgBE,SAAUmB,SAAUC,IAEvD,yBAAK/I,MAAO,CAAC+J,SAAS,WAAYC,IAAI,OAAQC,MAAM,MAAOC,MAAM,QAASC,OAAO,MAC/E,yBAAKtK,UAAU,eACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAmB,kBAACF,EAAA,EAAD,CAAKG,IAAKsK,IAAQrK,IAAI,OAAOC,MAAO,CAACkK,MAAM,OAAQG,OAAQ,YAEhG,2BAAO9I,KAAK,OAAO1B,UAAU,eAAegG,YAAY,SAASC,MAAO1D,EAAQ2D,SAAU0C,MAI9F,yBAAK5I,UAAU,8BACb,yBAAKA,UAAU,SACb,0CAEF,yBAAKA,UAAU,SACf,yBAAKA,UAAU,eAAeG,MAAO,CAACwG,UAAW,QAASd,QAAS,kBAAMF,EAAiB,WAAW,KAArG,oBAIF,yBAAK3F,UAAU,UACf,2BAAO4F,MAAM,oBAAoBzF,MAAO,CAACsK,gBAAgB,QAASC,aAAa,MAAO/D,UAAU,MAAOgE,UAAU,uHAC7G,+BACE,wBAAIxK,MAAO,CAACyK,MAAO,sBAAuBC,SAAS,OAAQC,WAAW,SAAUJ,aAAa,QAC3F,wBAAIvK,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,MACA,wBAAIjH,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,UACA,wBAAIjH,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,SACA,wBAAIjH,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,eACA,wBAAIjH,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,iBACA,wBAAIjH,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,UACA,wBAAIjH,MAAO,CAAC4K,aAAa,oBAAqBC,UAAU,OAAQnB,QAAQ,UAAWzC,MAAM,OAAzF,cAGJ,+BACc,KAAX7E,EACC,kBAAC,GAAD,CACEX,UAAWA,EACX+D,iBAAkBA,EAClBqB,iBAAkBA,EAClBC,iBAAkBA,IACpB,kBAAC,GAAD,CACErF,UAAWoG,EACXrC,iBAAkBA,EAClBqB,iBAAkBA,EAClBC,iBAAkBA,Y,gCChRnB,SAASgE,EAAWC,GACjC,OAAO,EAJT,mC,gCCAA,sCAAMjH,EAAe,WACnB,MAAO,8B,0ICKF,SAASkH,EAAqBD,EAAOE,GAC1C,OAAO,SAAuBhG,EAAKgE,GAC5BgC,GAASH,YAAWC,GAEzBG,IACEC,mBAASlG,KAASmG,kBAAQnG,IAAQoG,qBAAWpC,GAC7C,6EAKAqC,QAAQC,IAAIR,EAAMS,iBAAkBvG,IACpC8F,EAAMS,iBAAiBvG,KAASgE,IAIlC8B,EAAMS,iBAAiBvG,GAAOgE,EAC9B8B,EAAMU,eAAeC,YAAcX,EAAMS,qBAI9B,SAASG,EAAaZ,GAGnC,OAFAD,YAAWC,GAEJ,CACLa,cAAeZ,EAAqBD,GAAO,I,kCClBhC,IAwBT/B,EAAmB,SAAC,GAAsB,IAApB/D,EAAmB,EAAnBA,IAAKgE,EAAc,EAAdA,QACzB4C,EAAUC,IAAMC,WAAWC,KACjCF,IAAM1C,WAAU,WACduC,EAAaE,EAAQd,OAAOa,cAAc3G,EAAKgE,KAC9C,M,mGCpCCU,E,YAEJ,WAAY/J,GAAQ,IAAD,8BACjB,4CAAMA,KAED0C,MAAQ,CACX2J,aAAa,GAJE,E,sEASV,IAAD,OACN,OACE,yBAAKpM,UAAU,+CACZqM,KAAK5J,MAAM2J,YAAc,KAAO,kBAAC,IAAD,CAAUE,GAAG,cAC9C,uBAAGtM,UAAU,eAAeuM,KAAK,KAAjC,MACA,4BAAQvM,UAAU,iBAAiB0B,KAAK,SAAS8K,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC5J,0BAAM5M,UAAU,yBAElB,yBAAKA,UAAU,2BAA2B2I,GAAG,cAC3C,wBAAI3I,UAAU,sBACZ,wBAAIA,UAAqC,cAAzBqM,KAAKtM,MAAMgK,UAA6B,kBAAoB,YAC1E,uBAAG/J,UAAU,WAAWuM,KAAK,iBAA7B,cAEF,wBAAIvM,UAAqC,cAAzBqM,KAAKtM,MAAMgK,UAA6B,kBAAoB,YAC1E,uBAAG/J,UAAU,WAAWuM,KAAK,iBAA7B,cAEF,wBAAIvM,UAAqC,YAAzBqM,KAAKtM,MAAMgK,UAA2B,kBAAoB,YACxE,uBAAG/J,UAAU,WAAWuM,KAAK,gBAA7B,aAEF,wBAAIvM,UAAqC,cAAzBqM,KAAKtM,MAAMgK,UAA6B,kBAAoB,YAC1E,uBAAG/J,UAAU,WAAWuM,KAAK,iBAA7B,cAEF,wBAAIvM,UAAqC,SAAzBqM,KAAKtM,MAAMgK,UAAwB,kBAAoB,YACrE,uBAAG/J,UAAU,WAAWuM,KAAK,YAA7B,UAEF,wBAAIvM,UAAqC,SAAzBqM,KAAKtM,MAAMgK,UAAwB,kBAAoB,YACrE,uBAAG/J,UAAU,WAAWuM,KAAK,YAA7B,UAGJ,0BAAMvM,UAAU,cAAcG,MAAO,CAACqH,OAAQ,WAAY3B,QAAS,WACjE1B,aAAa0I,WAAW,oBACzB,EAAKC,SAAS,CAACV,aAAa,MAF7B,0B,GAxCWH,IAAMc,WAqDZjD,O,gCCnDf,SAASkD,EAAUC,GACjB,OAAwB,MAApBA,EAAS3F,QAAsC,MAApB2F,EAAS3F,OAC/B,KAEF2F,EAASC,OAUlB,SAASC,EAAYF,GACnB,GAAIA,EAAS3F,QAAU,KAAO2F,EAAS3F,OAAS,IAC9C,OAAO2F,EAGT,IAAMG,EAAQ,IAAIC,MAAMJ,EAASK,YAEjC,MADAF,EAAMH,SAAWA,EACXG,EAWO,SAAS9I,EAAQiJ,EAAKC,GACnC,OAAOC,MAAMF,EAAKC,GACf9D,KAAKyD,GACLzD,KAAKsD,GA1CV,mC,0ICCaU,EAAS,yBACTC,EAAoB,oC,yjBCIjC,IAEMC,EAAW,SAAAxI,GAAG,OAClBiG,IACEC,mBAASlG,KAASmG,kBAAQnG,GAC1B,uEAcG,SAASyI,EAAkB3C,EAAOE,GACvC,OAAO,SAAoBhG,GAA6B,IAAxB0I,EAAuB,uDAAV,GAAIC,EAAM,uCAChD3C,GAASH,YAAWC,GAEzB,IAAM8C,EAAa,KACdF,EADc,CAEjBG,KAAMH,EAAWG,MAAQP,IAEnBpE,EAAe0E,EAAf1E,KAAM2E,EAASD,EAATC,KAEdL,EAASxI,GAGT,IAAI8I,EAAUzC,QAAQC,IAAIR,EAAMiD,cAAe/I,KAY5C8I,GACAA,GAAWD,IAASP,GAAUO,IAASN,KAGxCzC,EAAMiD,cAAc/I,GAApB,KACK4I,EADL,CAEEI,KAAMlD,EAAMmD,QAAQ/E,EAAMyE,OAO3B,SAASO,EAAiBpD,EAAOE,GACtC,OAAO,SAAmBhG,GAKxB,GAJKgG,GAASH,YAAWC,GAEzB0C,EAASxI,GAELqG,QAAQC,IAAIR,EAAMiD,cAAe/I,GAAM,CACzC,IAAM0I,EAAa5C,EAAMiD,cAAc/I,GACnC0I,EAAWG,MAAQH,EAAWG,OAASP,IACzCI,EAAWM,KAAKG,SAIdrD,EAAMiD,cAAc/I,GAAO,UAOtB,SAAS0G,EAAaZ,GAGnC,OAFAD,YAAWC,GAEJ,CACLsD,WAAYX,EAAkB3C,GAAO,GACrCuD,UAAWH,EAAiBpD,GAAO,I,kCCtExB,IA8BT7B,EAAgB,SAAC,GAAyB,IAAvBjE,EAAsB,EAAtBA,IAAKkE,EAAiB,EAAjBA,KAAM2E,EAAW,EAAXA,KAC5BjC,EAAUC,IAAMC,WAAWC,KACjCF,IAAM1C,WAAU,WACd,IAAMmF,EAAY5C,EAAaE,EAAQd,OAGvC,OAFAwD,EAAUF,WAAWpJ,EAAK,CAAEkE,OAAM2E,SAE3B,WACLS,EAAUD,UAAUrJ,MAErB,M,gCCzDL,qCAae4E,IAXf,YAAwC,IAAxBC,EAAuB,EAAvBA,WAAYhB,EAAW,EAAXA,SAC1B,OAAO0F,IAASC,aACd,yBAAKhJ,MAAM,kBAAkBiJ,SAAS,KAAKC,KAAK,SAASC,kBAAgB,wBAAwBC,aAAW,OAAO7O,MAAO,CAAC8O,QAAShF,EAAa,QAAU,OAAQiF,QAAQjF,EAAa,EAAI,EAAGQ,gBAAgB,oBAC7M,yBAAK7E,MAAM,eAAekJ,KAAK,YAC5B7F,IAGLkG,SAAS5K","file":"static/js/8.1b8472f5.chunk.js","sourcesContent":["/**\n *\n * Img.js\n *\n * Renders an image, enforcing the usage of the alt=\"\" tag\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Img(props) {\n  return <img className={props.className} src={props.src} alt={props.alt} style={props.style} />;\n}\n\n// We require the use of src and alt, only enforced by react in dev mode\nImg.propTypes = {\n  src: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  alt: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nexport default Img;\n","module.exports = __webpack_public_path__ + \"static/media/Search.d50e8c79.svg\";","/*\n * ProductsConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const LOAD_EMPLOYEES = 'ps/UltimateEmpPage/LOAD_EMPLOYEES';\nexport const SAVE_EMPLOYEE = 'ps/UltimateEmpPage/SAVE_EMPLOYEE';\nexport const CREATE_EMPLOYEE = 'ps/UltimateEmpPage/CREATE_EMPLOYEE';\nexport const CHANGE_VISIBILITY = 'ps/UltimateEmpPage/CHANGE_VISIBILITY';\nexport const CHANGE_EMPLOYEE_NAME = 'ps/UltimateEmpPage/CHANGE_EMPLOYEE_NAME';\nexport const CHANGE_EMPLOYEE_EMAIL = 'ps/UltimateEmpPage/CHANGE_EMPLOYEE_EMAIL';\nexport const CHANGE_EMPLOYEE_PHONE = 'ps/UltimateEmpPage/CHANGE_EMPLOYEE_PHONE';\nexport const CHANGE_EMPLOYEE_BIRTHDAY = 'ps/UltimateEmpPage/CHANGE_EMPLOYEE_BIRTHDAY';\nexport const DELETE_EMPLOYEE = 'ps/UltimateEmpPage/DELETE_EMPLOYEE';\nexport const DELETED_EMPLOYEE = 'ps/UltimateEmpPage/DELETED_EMPLOYEE';\nexport const SELECT_EMPLOYEE = 'ps/UltimateEmpPage/SELECT_EMPLOYEE';\nexport const UPDATE_EMPLOYEE_NAME = 'ps/UltimateEmpPage/UPDATE_EMPLOYEE_NAME';\nexport const UPDATE_EMPLOYEE_EMAIL = 'ps/UltimateEmpPage/UPDATE_EMPLOYEE_EMAIL';\nexport const UPDATE_EMPLOYEE_PHONE = 'ps/UltimateEmpPage/UPDATE_EMPLOYEE_PHONE';\nexport const UPDATE_EMPLOYEE_BIRTHDAY = 'ps/UltimateEmpPage/UPDATE_EMPLOYEE_BIRTHDAY';\nexport const UPDATE_EMPLOYEE = 'ps/UltimateEmpPage/UPDATE_EMPLOYEE';\nexport const UPDATED_EMPLOYEE = 'ps/UltimateEmpPage/UPDATED_EMPLOYEE';\nexport const CHANGE_FILTER = 'ps/UltimateEmpPage/CHANGE_FILTER';","/*\n * Product Actions\n *\n * Actions change things in your application\n * Since this boilerplate uses a uni-directional data flow, specifically redux,\n * we have these actions which are the only way your application interacts with\n * your application state. This guarantees that your state is up to date and nobody\n * messes it up weirdly somewhere.\n *\n * To add a new Action:\n * 1) Import your constant\n * 2) Add a function like this:\n *    export function yourAction(var) {\n *        return { type: YOUR_ACTION_CONSTANT, var: var }\n *    }\n */\n\nimport { \n  LOAD_EMPLOYEES, \n  SAVE_EMPLOYEE,\n  CREATE_EMPLOYEE,\n  CHANGE_VISIBILITY,\n  CHANGE_EMPLOYEE_NAME,\n  CHANGE_EMPLOYEE_EMAIL,\n  CHANGE_EMPLOYEE_PHONE,\n  CHANGE_EMPLOYEE_BIRTHDAY,\n  DELETE_EMPLOYEE,\n  DELETED_EMPLOYEE,\n  SELECT_EMPLOYEE,\n  UPDATE_EMPLOYEE_NAME,\n  UPDATE_EMPLOYEE_EMAIL,\n  UPDATE_EMPLOYEE_PHONE,\n  UPDATE_EMPLOYEE_BIRTHDAY,\n  UPDATE_EMPLOYEE,\n  UPDATED_EMPLOYEE,\n  CHANGE_FILTER,\n } from './constants';\n\n/**\n * Changes the input field of the form\n * @param  {array} employees La lista de empleados\n * @return {object} An action object with a type of LOAD_EMPLOYEES\n */\nexport function loadEmployees(employees) {\n  return {\n    type: LOAD_EMPLOYEES,\n    employees,\n  };\n}\n\n/**\n * ACTION THAT SAGA LISTENS TO SAVE EMPLOYEE\n * @return {object} An action object with a type of SAVE_EMPLOYEE\n */\nexport function saveEmployee() {\n  return {\n    type: SAVE_EMPLOYEE,\n  };\n}\n\n\n/**\n * Changes the input field of the form\n * @param  {object} employeee Empleado de saga para actualizar estado\n * @return {object} An action object with a type of CREATE_EMPLOYEE\n */\nexport function createEmployee(employee) {\n  return {\n    type: CREATE_EMPLOYEE,\n    employee,\n  };\n}\n\n/**\n * Changes the input field of the form\n * @param  {object} employeee Empleado de saga para actualizar estado\n * @return {object} An action object with a type of CREATE_EMPLOYEE\n */\nexport function changeVisibility(who, visibility) {\n  return {\n    type: CHANGE_VISIBILITY,\n    who,\n    visibility,\n  };\n}\n\n\n/**\n * \n * @param {string} property product property to be change\n * * @param {string} value value to be change\n * @return {object} An action object with a type of CHANGE_PRODUCT_NAME or CHANGE_PRODUCT_PRICE\n */\nexport function changeEmployee(property, value){\n  switch (property) {\n    case \"name\":\n    return { type: CHANGE_EMPLOYEE_NAME, name: value};\n    case \"email\":\n    return { type: CHANGE_EMPLOYEE_EMAIL, email: value};\n    case \"phone\":\n    return { type: CHANGE_EMPLOYEE_PHONE, phone: value};\n    case \"birthday\":\n    return { type: CHANGE_EMPLOYEE_BIRTHDAY, birthday: value};\n  }\n}\n\n\n/**\n * Changes the input field of the form\n * @return {object} An action object with a type of DELETE_EMPLOYEE\n */\nexport function deleteEmployee(_id) {\n  return {\n    type: DELETE_EMPLOYEE,\n    _id,\n  };\n}\n\n\n/**\n * Changes the input field of the form\n * @param  {object} employeee Empleado de saga para eliminar \n * @return {object} An action object with a type of DELETED_EMPLOYEE\n */\nexport function deletedEmployee(employee) {\n  return {\n    type: DELETED_EMPLOYEE,\n    employee,\n  };\n}\n\n/**\n * ACTION THAT SAGA LISTENS TO SAVE EMPLOYEE\n * @return {object} An action object with a type of SAVE_EMPLOYEE\n */\nexport function selectEmployee(_id) {\n  return {\n    type: SELECT_EMPLOYEE,\n    _id,\n  };\n}\n\n\n/**\n * \n * @param {string} property product property to be change\n * * @param {string} value value to be change\n * @return {object} An action object with a type of CHANGE_PRODUCT_NAME or CHANGE_PRODUCT_PRICE\n */\nexport function updateEmployee(property, value){\n  switch (property) {\n    case \"name\":\n    return { type: UPDATE_EMPLOYEE_NAME, name: value};\n    case \"email\":\n    return { type: UPDATE_EMPLOYEE_EMAIL, email: value};\n    case \"phone\":\n    return { type: UPDATE_EMPLOYEE_PHONE, phone: value};\n    case \"birthday\":\n    return { type: UPDATE_EMPLOYEE_BIRTHDAY, birthday: value};\n  }\n}\n\n\n/**\n * Changes the input field of the form\n * @return {object} An action object with a type of DELETE_EMPLOYEE\n */\nexport function updateSelectedEmployee() {\n  return {\n    type: UPDATE_EMPLOYEE,\n  };\n}\n\n\n/**\n * Changes the input field of the form\n * @param  {object} employeee Empleado de saga para actualizar \n * @return {object} An action object with a type of UPDATED_EMPLOYEE\n */\nexport function updatedEmployee(employee) {\n  return {\n    type: UPDATED_EMPLOYEE,\n    employee,\n  };\n}\n\n/**\n * Changes the input field of the form\n * @param  {object} employeee Empleado de saga para actualizar \n * @return {object} An action object with a type of UPDATED_EMPLOYEE\n */\nexport function changeFilter(filter) {\n  return {\n    type: CHANGE_FILTER,\n    filter,\n  };\n}","/*\n * ProductReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\nimport { \n  CREATE_EMPLOYEE, \n  SAVE_EMPLOYEE,\n  LOAD_EMPLOYEES, \n  CHANGE_VISIBILITY,\n  CHANGE_EMPLOYEE_NAME,\n  CHANGE_EMPLOYEE_EMAIL,\n  CHANGE_EMPLOYEE_PHONE,\n  CHANGE_EMPLOYEE_BIRTHDAY,\n  DELETE_EMPLOYEE,\n  DELETED_EMPLOYEE,\n  SELECT_EMPLOYEE,\n  UPDATE_EMPLOYEE_NAME,\n  UPDATE_EMPLOYEE_EMAIL,\n  UPDATE_EMPLOYEE_PHONE,\n  UPDATE_EMPLOYEE_BIRTHDAY,\n  UPDATE_EMPLOYEE,\n  UPDATED_EMPLOYEE,\n  CHANGE_FILTER,\n} from './constants';\nimport { da } from 'date-fns/esm/locale';\n\n// The initial state of the App\nexport const initialState = {\n  employees: [],\n  isCreatePrdFormVisible: false,\n  name: '',\n  email: '',\n  phone: '',\n  birthday: new Date(),\n  is_crtForm_visible: false,\n  is_updtForm_visible: false,\n  selected_employee: {\n    _id: 'xxxxxxx',\n    name:'',\n    email:'',\n    phone:'',\n    birthday: new Date(),\n  },\n  filter:'',\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst productsReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case LOAD_EMPLOYEES:\n        draft.employees = action.employees;\n        break;\n      case SAVE_EMPLOYEE:\n        break;\n      case CREATE_EMPLOYEE:\n        draft.employees = draft.employees.concat([action.employee]);\n        draft.name = '';\n        draft.email = '';\n        draft.phone = '';\n        draft.birthday = new Date();\n        draft.is_crtForm_visible = false;\n        break;\n\n      case CHANGE_VISIBILITY:\n        switch (action.who) {\n          case \"crtForm\":            \n            draft.is_crtForm_visible = action.visibility;\n            break;\n          case \"updtForm\":            \n            draft.is_updtForm_visible = action.visibility;\n            break;\n        }\n        break;\n      case CHANGE_EMPLOYEE_NAME:\n        draft.name = action.name; \n        break;\n      case CHANGE_EMPLOYEE_EMAIL:\n        draft.email = action.email;\n        break;\n      case CHANGE_EMPLOYEE_PHONE:\n        draft.phone = action.phone;\n        break;\n      case CHANGE_EMPLOYEE_BIRTHDAY:\n        draft.birthday = action.birthday;\n        break;\n\n      case DELETE_EMPLOYEE:\n        draft.selected_employee = draft.employees.find(e => e._id === action._id);\n        break;\n      case DELETED_EMPLOYEE:\n        let e_index = draft.employees.findIndex(e => e._id === action.employee._id);\n        draft.employees.splice(1, e_index);\n        break;\n      case SELECT_EMPLOYEE:\n        draft.selected_employee = draft.employees.find(e => e._id === action._id);\n        break;\n\n      case UPDATE_EMPLOYEE_NAME:\n        draft.selected_employee.name = action.name;\n        break;\n\n      case UPDATE_EMPLOYEE_EMAIL:\n        draft.selected_employee.email = action.email;\n        break;\n\n      case UPDATE_EMPLOYEE_PHONE:\n        draft.selected_employee.phone = action.phone;\n        break;\n\n      case UPDATE_EMPLOYEE_BIRTHDAY:\n        draft.selected_employee.birthday = action.birthday;\n        break;\n\n      case UPDATE_EMPLOYEE:\n        break;\n      case UPDATED_EMPLOYEE:\n        let updt_index = draft.employees.findIndex(e => e._id === action.employee._id);\n        draft.employees[updt_index] = action.employee;\n        draft.is_updtForm_visible = false;\n        break\n\n      case CHANGE_FILTER:\n        draft.filter = action.filter;\n        break;\n    }\n  });\n\nexport default productsReducer;","/**\n * ProductPage selectors\n */\n\nimport { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectEmp = state => state.employees || initialState;\n\nconst makeSelectEmployees = () =>\n  createSelector(\n    selectEmp,\n    empState => empState.employees,\n  );\n\nconst makeSelectFilteredEmployees = () =>\n  createSelector(\n    selectEmp,\n    employeesState => employeesState.employees.filter(employee => employee.name.startsWith(employeesState.filter)),\n  );\n\nconst makeSelectProduct = () =>\n  createSelector(\n    selectEmp,\n    empState => {\n      return{\n        name: empState.productName,\n        hasPrice: empState.productHasPrice,\n        price: empState.productPrice,\n      };\n    },\n  );\n\nconst makeSelectNewEmployee = () =>\n  createSelector(\n    selectEmp,\n    empState => {\n      return {\n        name: empState.name,\n        email: empState.email,\n        phone: empState.phone,\n        birthday: empState.birthday,\n      };\n    },\n  );\n\nconst makeSelectFormVisibility = () =>\n  createSelector(\n    selectEmp,\n    empState => {\n      return({\n        crtForm: empState.is_crtForm_visible,\n        updtForm: empState.is_updtForm_visible,\n      });\n    },\n  );\n\nconst makeSelectSelectedEmployee = () =>\n  createSelector(\n    selectEmp,\n    empState => empState.selected_employee,\n  );\n\nconst makeSelectFilter = () =>\n  createSelector(\n    selectEmp,\n    empState => empState.filter,\n  );\n\nexport { makeSelectEmployees, makeSelectFormVisibility, makeSelectNewEmployee, makeSelectSelectedEmployee, makeSelectFilter, makeSelectFilteredEmployees };","import { getServerUrl } from './../../utils/serverURL';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { SAVE_EMPLOYEE, DELETE_EMPLOYEE, UPDATE_EMPLOYEE } from './constants';\nimport { makeSelectNewEmployee, makeSelectSelectedEmployee } from './selectors';\nimport { createEmployee, deletedEmployee, updatedEmployee } from './actions';\nimport request from './../../utils/request';\nimport produce from 'immer';\n\nexport function* sagaSaveEmployee() {\n  // Select username from store\n  const employee = yield select(makeSelectNewEmployee());\n  const requestURL = `${getServerUrl()}/employees`;\n\n  try {\n    const token = localStorage.getItem(\"PointOfSaleToken\")\n    const saved_employee = yield call(request, requestURL, {\n      body: JSON.stringify(employee),\n      headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n      method: 'POST'\n    });\n\n    yield put(createEmployee(saved_employee)); \n    \n  } catch (err) {\n    console.log(\"err\")\n    console.log(err)\n  }\n}\n\nexport function* sagaDeleteEmployee() {\n  // Select username from store\n  const s_employee = yield select(makeSelectSelectedEmployee());\n  const requestURL = `${getServerUrl()}/employees/${s_employee._id}`;\n\n  try {\n    const token = localStorage.getItem(\"PointOfSaleToken\")\n    const deleted_employee = yield call(request, requestURL, {\n      body: JSON.stringify(s_employee),\n      headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n      method: 'DELETE'\n    });\n    console.log(deleted_employee);\n\n    yield put(deletedEmployee(deleted_employee)); \n    \n  } catch (err) {\n    console.log(\"err\")\n    console.log(err)\n  }\n}\n\nexport function* sagaUpdateEmployee() {\n  // Select username from store\n  const s_employee = yield select(makeSelectSelectedEmployee());\n  const requestURL = `${getServerUrl()}/employees/${s_employee._id}`;\n\n  try {\n    const token = localStorage.getItem(\"PointOfSaleToken\")\n    const updated_employee = yield call(request, requestURL, {\n      body: JSON.stringify(s_employee),\n      headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n      method: 'PATCH'\n    });\n    console.log(updated_employee);\n\n    yield put(updatedEmployee(updated_employee)); \n    \n  } catch (err) {\n    console.log(\"err\")\n    console.log(err)\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* sagaListener() {\n  yield takeLatest(SAVE_EMPLOYEE, sagaSaveEmployee);\n  yield takeLatest(DELETE_EMPLOYEE, sagaDeleteEmployee);\n  yield takeLatest(UPDATE_EMPLOYEE, sagaUpdateEmployee);\n}","import React, {useEffect, memo} from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { createStructuredSelector } from 'reselect';\nimport { useInjectReducer } from './../../utils/injectReducer';\nimport { useInjectSaga } from './../../utils/injectSaga';\nimport { loadEmployees, saveEmployee, changeVisibility, changeEmployee, deleteEmployee, selectEmployee, updateEmployee, updateSelectedEmployee, changeFilter } from './actions';\nimport { makeSelectEmployees, makeSelectFormVisibility, makeSelectNewEmployee, makeSelectSelectedEmployee, makeSelectFilter, makeSelectFilteredEmployees } from './selectors';\nimport { getServerUrl } from './../../utils/serverURL';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale, setDefaultLocale } from  \"react-datepicker\";\nimport es from 'date-fns/locale/es';\n\nimport Navbar from '../../components/Navbar';\nimport Modal from '../../components/Modal';\nimport Search from './Search.svg';\nimport Img from '../../components/Img';\nimport reducer from './reducer';\nimport saga from './saga';\nconst key = 'employees';\nregisterLocale('es', es);\n\nconst EmployeeForm = ({new_employee, onChangeEmployee, onSaveEmployee, changeVisibility}) => {\n  return(\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Crear Empleado</h5>\n        <button type=\"button\" class=\"close\" onClick={() => changeVisibility(\"crtForm\", false)}>\n          <span aria-hidden=\"true\">×</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Nombre(s)</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Nombre(s)\"\n          value={new_employee.name}\n          onChange={(evt) => onChangeEmployee(\"name\", evt.target.value)}/>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Email\"\n          value={new_employee.email}\n          onChange={(evt) => onChangeEmployee(\"email\", evt.target.value)}/>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Teléfono</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Teléfono\"\n          value={new_employee.phone}\n          onChange={(evt) => onChangeEmployee(\"phone\", evt.target.value)}/>\n      </div>\n      <div className=\"form-group\">\n            <label>Fecha de nacimiento</label> <br/>\n            <DatePicker\n              locale=\"es\"\n              className=\"form-control\"\n              showMonthDropdown\n              showYearDropdown\n              selected={new Date(new_employee.birthday)}\n              onSelect={(date) => {onChangeEmployee(\"birthday\", date)}}\n            />\n          </div>\n      <div \n        className=\"btn btn-dark\" \n        style={{marginTop: \"8px\"}}\n        onClick={onSaveEmployee}>\n          Crear Empleado\n      </div>\n    </div>\n    </div>\n  );\n}\n\nconst UpdateForm = ({employee, changeVisibility, onUpdateEmployee, onUpdateSelected}) => {\n  return(\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Crear Empleado</h5>\n        <button type=\"button\" class=\"close\" onClick={() => changeVisibility(\"updtForm\", false)}>\n          <span aria-hidden=\"true\">×</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Nombre(s)</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Nombre(s)\"\n          value={employee.name}\n          onChange={(evt) => onUpdateEmployee(\"name\", evt.target.value)}/>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Email\"\n          value={employee.email}\n          onChange={(evt) => onUpdateEmployee(\"email\", evt.target.value)}/>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Teléfono</label>\n        <input \n          type=\"text\" \n          class=\"form-control\" \n          placeholder=\"Teléfono\"\n          value={employee.phone}\n          onChange={(evt) => onUpdateEmployee(\"phone\", evt.target.value)}/>\n      </div>\n      <div className=\"form-group\">\n            <label>Fecha de nacimiento</label> <br/>\n            <DatePicker\n              locale=\"es\"\n              className=\"form-control\"\n              showMonthDropdown\n              showYearDropdown\n              selected={new Date(employee.birthday)}\n              onSelect={(date) => {onUpdateEmployee(\"birthday\", date)}}\n            />\n          </div>\n      <div \n        className=\"btn btn-dark\" \n        style={{marginTop: \"8px\"}}\n        onClick={onUpdateSelected}>\n          Actualizar Empleado\n      </div>\n    </div>\n    </div>\n  );\n}\n\nconst Table = ({employees, changeVisibility, onDeleteEmployee, onSelectEmployee}) => {\n  return(\n    employees.map(e => {\n      return(\n        <tr>\n        <td style={{border:\"none\"}} scope=\"row\">{e._id}</td>\n        <td style={{border:\"none\"}}>{e.name}</td>\n        <td style={{border:\"none\"}}>{e.email}</td>\n        <td style={{border:\"none\"}}>{e.phone}</td>\n        <td style={{border:\"none\"}}>{typeof(e.birthday) === 'object' ? e.birthday.toLocaleDateString(\"es-MX\") : new Date(e.birthday).toLocaleDateString() }</td>\n        <td style={{border:\"none\"}}>{e.status === 0 ? <span class=\"badge badge-secondary\">Inactivo</span> : <span class=\"badge badge-secondary\">Activo</span>}</td>\n        <td style={{border:\"none\"}}>      \n          <img src=\"p.png\" style={{height:\"16px\", cursor:\"pointer\", margin:\"0 4px\"}} onClick={() => {\n            onSelectEmployee(e._id);\n            changeVisibility(\"updtForm\", true);\n          }}/>\n          <img src=\"r.png\" style={{height:\"16px\", cursor:\"pointer\", margin:\"0 4px\"}} onClick={() => {\n            onDeleteEmployee(e._id)\n          }}/>\n        </td>\n      </tr>\n      );\n    }));\n};\n\nfunction EmployeesUltimate({\n  employees,\n  form_visibility,\n  new_employee,\n  selected_empoyee,\n  filter,\n  filtered_employees,\n  onLoadEmployees,\n  changeVisibility,\n  onChangeEmployee,\n  onSaveEmployee,\n  onDeleteEmployee,\n  onSelectEmployee,\n  onUpdateEmployee,\n  onUpdateSelected,\n  onChangeFilter,\n}) {\n  let children;\n  let children2;\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  useEffect(() => {\n\n    const requestURL = `${getServerUrl()}/employees`;\n    try {\n      const token = localStorage.getItem(\"PointOfSaleToken\")\n\n      axios.get(requestURL, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n      .then(({ data }) => {\n        onLoadEmployees(data.data);\n      });\n\n    } catch (err) {\n      console.log(\"err\")\n      console.log(err)\n    }\n\n  }, []);\n\n  children = (\n    <EmployeeForm \n      new_employee={new_employee} \n      onChangeEmployee={onChangeEmployee} \n      onSaveEmployee={onSaveEmployee}\n      changeVisibility={changeVisibility}/>\n  );\n\n  children2 = (\n    <UpdateForm \n      changeVisibility={changeVisibility}\n      employee={selected_empoyee}\n      onUpdateEmployee={onUpdateEmployee}\n      onUpdateSelected={onUpdateSelected}/>\n  );\n\n  return (\n    <div className=\"container-fluid\" style={{padding: '0px'}}>\n      <Navbar is_active='employees' />\n      <Modal is_visible={form_visibility.crtForm} children={children} />\n      <Modal is_visible={form_visibility.updtForm} children={children2} />\n\n      <div style={{position:'absolute', top:'68px', right:'8px', width:'200px', zIndex:\"1\"}}>\n        <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\"><Img src={Search} alt=\"desc\" style={{width:'16px', heigth: '100%'}}/></span>\n          </div>\n          <input type=\"text\" className=\"form-control\" placeholder=\"Buscar\" value={filter} onChange={onChangeFilter} />\n        </div>\n      </div>\n\n      <div className=\"row justify-content-center\">\n        <div className=\"col-6\">\n          <h1>Empleados</h1>\n        </div>\n        <div className=\"col-6\">    \n        <div className=\"btn btn-dark\" style={{marginTop: \"12px\"}} onClick={() => changeVisibility(\"crtForm\", true)} >Crear Empleado</div>      \n        </div>\n      </div>\n\n      <div className=\"col-12\">\n      <table class=\"table table-hover\" style={{backgroundColor:\"white\", borderRadius:\"8px\", marginTop:\"8vh\", boxShadow:\"0px 3px 5px -1px rgba(0, 0, 0, 0.06), 0px 6px 10px 0px rgba(0, 0, 0, 0.042), 0px 1px 18px 0px rgba(0, 0, 0, 0.036)\"}}>\n          <thead>\n            <tr style={{color: \"rgba(0, 0, 0, 0.54)\", fontSize:\"12px\", lineHeight:\"1.3rem\", borderRadius:\"4px\"}}>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">ID</th>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">Nombre</th>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">Email</th>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">Teléfono</th>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">Cumpleaños</th>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">Estado</th>\n              <th style={{borderBottom:\"1px solid #dee2e6\", borderTop:\"none\", padding:\"0.5rem\"}} scope=\"col\">Acciones</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filter === \"\" ? \n              <Table \n                employees={employees} \n                changeVisibility={changeVisibility} \n                onDeleteEmployee={onDeleteEmployee}\n                onSelectEmployee={onSelectEmployee}/> :\n              <Table \n                employees={filtered_employees} \n                changeVisibility={changeVisibility} \n                onDeleteEmployee={onDeleteEmployee}\n                onSelectEmployee={onSelectEmployee}/>}\n     \n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nEmployeesUltimate.propTypes = {\n  employees: PropTypes.array,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  employees: makeSelectEmployees(),\n  form_visibility: makeSelectFormVisibility(),\n  new_employee: makeSelectNewEmployee(),\n  selected_empoyee: makeSelectSelectedEmployee(),\n  filter: makeSelectFilter(),\n  filtered_employees: makeSelectFilteredEmployees(),\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    onLoadEmployees: (employees) => dispatch(loadEmployees(employees)),\n    changeVisibility: (form, visibility) => dispatch(changeVisibility(form, visibility)),\n    onChangeEmployee: (property, value) => dispatch(changeEmployee(property, value)),\n    onUpdateEmployee: (property, value) => dispatch(updateEmployee(property, value)),\n    onSaveEmployee: () => dispatch(saveEmployee()),\n    onDeleteEmployee: (id) => dispatch(deleteEmployee(id)),\n    onSelectEmployee: (id) => dispatch(selectEmployee(id)),\n    onUpdateSelected: () => dispatch(updateSelectedEmployee()),\n    onChangeFilter: (evt) => dispatch(changeFilter(evt.target.value)),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\n\nexport default compose(\n  withConnect,\n  memo,\n)(EmployeesUltimate);\n","/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  return true;\n}","const getServerUrl = () => {\n  return \"https://e7c274ef.ngrok.io\";\n}\n\nexport { getServerUrl };","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from './../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  };\n}","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };","import React from 'react'\nimport { Redirect } from 'react-router';\nimport { Link } from \"react-router-dom\";\n\n\nclass Navbar extends React.Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      is_loggedIn: true,\n    }\n  }\n  \n\n  render(){\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        {this.state.is_loggedIn ? null : <Redirect to=\"/PS/login\" /> }\n        <a className=\"navbar-brand\" href=\"#\">PS</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className={(this.props.is_active === 'dashboard') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/dashboard\">Dashboard</a>\n            </li>\n            <li className={(this.props.is_active === 'employees') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/employees\">Employees</a>\n            </li>\n            <li className={(this.props.is_active === 'product') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/ultimate\">Products</a>\n            </li>\n            <li className={(this.props.is_active === 'analytics') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/analytics\">Analytics</a>\n            </li>\n            <li className={(this.props.is_active === 'flow') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/flow\">Flujo</a>\n            </li>\n            <li className={(this.props.is_active === 'cash') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/cash\">Caja</a>\n            </li>\n          </ul>\n          <span className=\"navbar-text\" style={{cursor: \"pointer\"}} onClick={() => {\n            localStorage.removeItem(\"PointOfSaleToken\");\n           this.setState({is_loggedIn: false});\n          }}>\n            Cerrar Sesión\n          </span>\n        </div>\n      </nav>\n    )\n  }\n\n}\n\nexport default Navbar;\n\n","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n  invariant(\n    isString(key) && !isEmpty(key),\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\n  );\n\nconst checkDescriptor = descriptor => {\n  const shape = {\n    saga: isFunction,\n    mode: mode => isString(mode) && allowedModes.includes(mode),\n  };\n  invariant(\n    conformsTo(descriptor, shape),\n    '(src/utils...) injectSaga: Expected a valid saga descriptor',\n  );\n};\n\nexport function injectSagaFactory(store, isValid) {\n  return function injectSaga(key, descriptor = {}, args) {\n    if (!isValid) checkStore(store);\n\n    const newDescriptor = {\n      ...descriptor,\n      mode: descriptor.mode || DAEMON,\n    };\n    const { saga, mode } = newDescriptor;\n\n    checkKey(key);\n    //checkDescriptor(newDescriptor);\n\n    let hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      const oldDescriptor = store.injectedSagas[key];\n      // enable hot reloading of daemon and once-till-unmount sagas\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (\n      !hasSaga ||\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n    ) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = {\n        ...newDescriptor,\n        task: store.runSaga(saga, args),\n      };\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      const descriptor = store.injectedSagas[key];\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel();\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n        }\n      }\n    }\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true),\n  };\n}\n","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };","import React from 'react'\nimport ReactDOM from 'react-dom';\nfunction Modal({is_visible, children}) {\n  return ReactDOM.createPortal(\n    <div class=\"modal show fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLiveLabel\" aria-modal=\"true\" style={{display: is_visible ? \"block\" : \"none\", opacity:is_visible ? 1 : 0, backgroundColor:\"rgba(0,0,0,0.5)\"}}>\n      <div class=\"modal-dialog\" role=\"document\">\n        {children}\n      </div>\n    </div>,\n    document.body\n  );\n}\n\nexport default Modal;\n"],"sourceRoot":""}
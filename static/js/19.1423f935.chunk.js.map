{"version":3,"sources":["containers/SignupPage/constants.js","containers/SignupPage/reducer.js","containers/SignupPage/selectors.js","containers/SignupPage/saga.js","containers/SignupPage/actions.js","containers/SignupPage/index.js","utils/checkStore.js","utils/serverURL.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/request.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js"],"names":["CHANGE_NAME","CHANGE_EMAIL","CHANGE_CODE","CREATE_OWNER","UPDATE_OWNER","initialState","name","email","code","wasCreated","signupReducer","state","action","produce","draft","type","console","log","owner","selectSignup","signup","makeSelectName","createSelector","signupState","makeSelectEmail","makeSelectCode","createOwnerSaga","sagaListener","select","requestURL","getServerUrl","call","request","body","JSON","stringify","headers","method","createdOwner","put","takeLatest","key","SignupPage","wasOwnerCreated","onChangeName","onChangeEmail","onChangeCode","onCreateOwner","useInjectReducer","reducer","useInjectSaga","saga","className","to","style","marginTop","textAlign","value","onChange","placeholder","onClick","password","width","mapStateToProps","createStructuredSelector","mapDispatchToProps","dispatch","evt","target","createOwner","withConnect","connect","compose","memo","checkStore","store","injectReducerFactory","isValid","invariant","isString","isEmpty","isFunction","Reflect","has","injectedReducers","replaceReducer","createReducer","getInjectors","injectReducer","context","React","useContext","ReactReduxContext","useEffect","parseJSON","response","status","json","checkStatus","error","Error","statusText","url","options","fetch","then","DAEMON","ONCE_TILL_UNMOUNT","checkKey","injectSagaFactory","descriptor","args","newDescriptor","mode","hasSaga","injectedSagas","task","runSaga","ejectSagaFactory","cancel","injectSaga","ejectSaga","injectors"],"mappings":"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","file":"static/js/19.1423f935.chunk.js","sourcesContent":["/*\n * SignupConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const CHANGE_NAME = 'ps/SignupPage/CHANGE_NAME';\nexport const CHANGE_EMAIL = 'ps/SignupPage/CHANGE_EMAIL';\nexport const CHANGE_CODE = 'ps/SignupPage/CHANGE_CODE';\nexport const CREATE_OWNER = 'ps/SignupPage/CREATE_OWNER';\nexport const UPDATE_OWNER = 'ps/SignupPage/UPDATE_OWNER';\n","/*\n * SignupReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\nimport { CHANGE_NAME, CHANGE_EMAIL, CHANGE_CODE, CREATE_OWNER, UPDATE_OWNER } from './constants';\n\n// The initial state of the App\nexport const initialState = {\n  name: '',\n  email: '',\n  code: '',\n  wasCreated: false,\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst signupReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case CHANGE_NAME:\n        draft.name = action.name;\n        break;\n      case CHANGE_EMAIL:\n        draft.email = action.email;\n        break;\n      case CHANGE_CODE:\n        draft.code = action.code;\n        break;\n      case CREATE_OWNER:\n        console.log(\"reducer\")\n        break;\n      case UPDATE_OWNER:\n        draft.owner = action.owner;\n        draft.name = '';\n        draft.email = '';\n        draft.code = '';\n        draft.wasCreated = true;\n        break;\n    }\n  });\n\nexport default signupReducer;","/**\n * SignupPage selectors\n */\n\nimport { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectSignup = state => state.signup || initialState;\n\nconst makeSelectName = () =>\n  createSelector(\n    selectSignup,\n    signupState => signupState.name,\n  );\n\nconst makeSelectEmail = () =>\n  createSelector(\n    selectSignup,\n    signupState => signupState.email,\n  );\n\nconst makeSelectCode = () =>\n  createSelector(\n    selectSignup,\n    signupState => signupState.code,\n  );\n\nconst makeSelectWasCreated = () =>\n  createSelector(\n    selectSignup,\n    signupState => signupState.wasCreated,\n  );\n\nexport { selectSignup, makeSelectName, makeSelectEmail, makeSelectCode, makeSelectWasCreated};","/**\n * Gets the repositories of the user from Github\n */\nimport { getServerUrl } from './../../utils/serverURL';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { CREATE_OWNER } from './constants';\nimport { updateOwner } from './actions';\n\nimport request from './../../utils/request';\nimport { makeSelectName, makeSelectEmail, makeSelectCode } from './selectors';\n\n/**\n * \n */\nexport function* createOwnerSaga() {\n\n  console.log(\"create owner\")\n\n  // Select username from store\n  const name = yield select(makeSelectName());\n  const email = yield select(makeSelectEmail());\n  const code = yield select(makeSelectCode());\n\n  const requestURL = `${getServerUrl()}/users`;\n\n  try {\n    // Call our request helper (see 'utils/request')\n    const createdOwner = yield call(request, requestURL, {\n      body: JSON.stringify({name:name, email: email, code: code}),\n      headers: {'Content-Type': 'application/json'},\n      method: 'POST'\n    });\n    yield put(updateOwner(createdOwner));\n  } catch (err) {\n    console.log(err)\n    //yield put(repoLoadingError(err));\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* sagaListener() {\n  yield takeLatest(CREATE_OWNER, createOwnerSaga);\n}","/*\n * Signup Actions\n *\n * Actions change things in your application\n * Since this boilerplate uses a uni-directional data flow, specifically redux,\n * we have these actions which are the only way your application interacts with\n * your application state. This guarantees that your state is up to date and nobody\n * messes it up weirdly somewhere.\n *\n * To add a new Action:\n * 1) Import your constant\n * 2) Add a function like this:\n *    export function yourAction(var) {\n *        return { type: YOUR_ACTION_CONSTANT, var: var }\n *    }\n */\n\nimport { CHANGE_NAME, CHANGE_EMAIL, CHANGE_CODE, CREATE_OWNER, UPDATE_OWNER } from './constants';\n\n/**\n * Changes the input field of the form\n *\n * @param  {string} name The new text of the input field\n * @param  {string} email The new text of the input field\n * @param  {string} code The new text of the input field\n *\n * @return {object} An action object with a type of CHANGE_USERNAME\n */\nexport function changeName(name) {\n  return {\n    type: CHANGE_NAME,\n    name,\n  };\n}\n\nexport function changeEmail(email) {\n  return {\n    type: CHANGE_EMAIL,\n    email,\n  };\n}\n\nexport function changeCode(code) {\n  return {\n    type: CHANGE_CODE,\n    code,\n  };\n}\n\nexport function createOwner(owner) {\n  return {\n    type: CREATE_OWNER,\n    owner,\n  };\n}\n\nexport function updateOwner(owner) {\n  return {\n    type: UPDATE_OWNER,\n    owner,\n  };\n}","import React, { useEffect, memo } from 'react'\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { useInjectReducer } from './../../utils/injectReducer';\nimport { useInjectSaga } from './../../utils/injectSaga';\n\nimport { changeName, changeEmail, changeCode, createOwner } from './actions';\n\nimport { makeSelectName, makeSelectEmail, makeSelectCode, makeSelectWasCreated } from './selectors';\n\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst key = 'signup';\n\nexport function SignupPage({\n  name, \n  email,\n  code,\n  wasOwnerCreated,\n  onChangeName,\n  onChangeEmail,\n  onChangeCode,\n  onCreateOwner,\n}) {\n\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  return (\n      <div className=\"row justify-content-center\">\n        {wasOwnerCreated ? <Redirect to=\"/login\" /> : null }\n        <div className=\"col-4\">\n          <div className=\"card\" style={{marginTop:'calc(50vh - 200px)'}}>\n            <div className=\"card-body\" style={{textAlign:'left'}}>\n              <div className=\"form-group\">\n                <label>Nombre(s)</label>\n                <input value={name} onChange={onChangeName} type=\"text\" className=\"form-control\" placeholder=\"Nombre(s)\"/>\n              </div>\n              <div className=\"form-group\">\n                <label>Correo Electrónico</label>\n                <input value={email} onChange={onChangeEmail} type=\"email\" className=\"form-control\" placeholder=\"Correo Electrónico\"/>\n              </div>\n              <div className=\"form-group\">\n                <label>Código</label>\n                <input value={code} onChange={onChangeCode} type=\"password\" className=\"form-control\" placeholder=\"Código\"/>\n              </div>\n              <div className=\"btn btn-dark\" onClick={() => onCreateOwner({name: name, email: email, password: code})} style={{width:'100%'}}>Crear</div>\n            </div>\n          </div>\n        </div>\n      </div>\n  )\n}\n\n\nSignupPage.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  code: PropTypes.string,\n  onChangeName: PropTypes.func,\n  onChangeEmail: PropTypes.func,\n  onChangeCode: PropTypes.func,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  name: makeSelectName(),\n  email: makeSelectEmail(),\n  code: makeSelectCode(),\n  wasOwnerCreated: makeSelectWasCreated(),\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    onChangeName: evt => dispatch(changeName(evt.target.value)),\n    onChangeEmail: evt => dispatch(changeEmail(evt.target.value)),\n    onChangeCode: evt => dispatch(changeCode(evt.target.value)),\n    onCreateOwner: owner => {\n      console.log(\"sadadasdas\");\n      dispatch(createOwner(owner))\n    },\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\n\nexport default compose(\n  withConnect,\n  memo,\n)(SignupPage);\n","/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  return true;\n}","const getServerUrl = () => {\n  return \"https://2c5046b9.ngrok.io\";\n}\n\nexport { getServerUrl };","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from './../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  };\n}","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n  invariant(\n    isString(key) && !isEmpty(key),\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\n  );\n\nconst checkDescriptor = descriptor => {\n  const shape = {\n    saga: isFunction,\n    mode: mode => isString(mode) && allowedModes.includes(mode),\n  };\n  invariant(\n    conformsTo(descriptor, shape),\n    '(src/utils...) injectSaga: Expected a valid saga descriptor',\n  );\n};\n\nexport function injectSagaFactory(store, isValid) {\n  return function injectSaga(key, descriptor = {}, args) {\n    if (!isValid) checkStore(store);\n\n    const newDescriptor = {\n      ...descriptor,\n      mode: descriptor.mode || DAEMON,\n    };\n    const { saga, mode } = newDescriptor;\n\n    checkKey(key);\n    //checkDescriptor(newDescriptor);\n\n    let hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      const oldDescriptor = store.injectedSagas[key];\n      // enable hot reloading of daemon and once-till-unmount sagas\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (\n      !hasSaga ||\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n    ) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = {\n        ...newDescriptor,\n        task: store.runSaga(saga, args),\n      };\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      const descriptor = store.injectedSagas[key];\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel();\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n        }\n      }\n    }\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true),\n  };\n}\n","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };"],"sourceRoot":""}
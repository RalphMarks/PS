{"version":3,"sources":["components/Img/index.js","containers/EmployeesPage/Search.svg","components/Table/index.js","containers/EmployeesPage/constants.js","containers/EmployeesPage/actions.js","containers/EmployeesPage/reducer.js","containers/EmployeesPage/selectors.js","containers/EmployeesPage/saga.js","containers/EmployeesPage/index.js","utils/checkStore.js","utils/serverURL.js","utils/reducerInjectors.js","utils/injectReducer.js","components/Navbar/index.js","utils/request.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js"],"names":["Img","props","className","src","alt","style","module","exports","Table","marginTop","backgroundColor","scope","employees","map","employee","onClick","onChangeUpdateFormVisibility","cursor","name","email","phone","birthday","toLocaleDateString","Date","CHANGE_NAME","CHANGE_EMAIL","CHANGE_PHONE","CHANGE_BIRTHDAY","CHANGE_FORM_VISIBILITY","CHANGE_UPDATE_FORM_VISIBILITY","CREATE_EMPLOYEE","CHANGE_FILTERTEXT","UPDATE_EMPLOYEE","CHANGE_EMPLOYEE_NAME","CHANGE_EMPLOYEE_EMAIL","CHANGE_EMPLOYEE_PHONE","CHANGE_EMPLOYEE_BIRTHDAY","RESET_CREATE_EMPL_FORM","LOAD_EMPLOYEES","updateEmployee","updatedEmployee","type","loadEmployees","data","console","log","initialState","isEmplFormVisible","isUpdteEmplFormVisible","filterText","selectedEmplForUpdate","undefined","EmployeeReducer","state","action","produce","draft","concat","newEmplData","emplData","employeeIndex","findIndex","newValue","selectEmployees","makeSelectName","createSelector","employeesState","makeSelectEmail","makeSelectPhone","makeSelectBirthday","sagaSaveEmployee","createEmployee","select","requestURL","getServerUrl","token","localStorage","getItem","call","request","body","JSON","stringify","headers","method","authResponse","put","takeLatest","key","registerLocale","es","Form","textAlign","placeholder","value","onChange","onChangeName","onChangeEmail","onChangePhone","locale","selected","onSelect","onChangeBirthday","showMonthDropdown","showYearDropdown","UpdateEmplForm","evt","onChangeUpdateEmpl","target","updateEmploye","EmployeesPage","isUpdtEmplFormVisible","filteredEmployees","toUpdteEmployee","onChangeEmplFormVisibility","onChangeFilterText","onLoadEmployees","useInjectReducer","reducer","useInjectSaga","saga","useEffect","axios","get","then","err","Navbar","is_active","position","top","right","width","Banner","heigth","mapStateToProps","createStructuredSelector","filter","startsWith","mapDispatchToProps","dispatch","date","emp","changeUpdateEmployee","withConnect","connect","compose","memo","checkStore","store","injectReducerFactory","isValid","invariant","isString","isEmpty","isFunction","Reflect","has","injectedReducers","replaceReducer","createReducer","getInjectors","injectReducer","context","React","useContext","ReactReduxContext","is_loggedIn","this","to","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","removeItem","setState","Component","parseJSON","response","status","json","checkStatus","error","Error","statusText","url","options","fetch","DAEMON","ONCE_TILL_UNMOUNT","checkKey","injectSagaFactory","descriptor","args","newDescriptor","mode","hasSaga","injectedSagas","task","runSaga","ejectSagaFactory","cancel","injectSaga","ejectSaga","injectors"],"mappings":"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","file":"static/js/12.bc75a7c6.chunk.js","sourcesContent":["/**\n *\n * Img.js\n *\n * Renders an image, enforcing the usage of the alt=\"\" tag\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Img(props) {\n  return <img className={props.className} src={props.src} alt={props.alt} style={props.style} />;\n}\n\n// We require the use of src and alt, only enforced by react in dev mode\nImg.propTypes = {\n  src: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  alt: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nexport default Img;\n","module.exports = __webpack_public_path__ + \"static/media/Search.d50e8c79.svg\";","import React, { memo } from 'react'\n\nconst Table =(props) => {\n  return(\n    <div className=\"row justify-content-center\" style={{marginTop:'20vh'}}>\n    <table className=\"col-8 table table-sm table-striped\" style={{backgroundColor: 'white'}}>\n      <thead>\n        <tr>\n          <th scope=\"col\">ID</th>\n          <th scope=\"col\">Nombre</th>\n          <th scope=\"col\">Email</th>\n          <th scope=\"col\">Teléfono</th>\n          <th scope=\"col\">Cumpleaños</th>\n        </tr>\n      </thead>\n      <tbody>\n      {props.employees.map(employee => {\n          return (\n            <tr onClick={() => props.onChangeUpdateFormVisibility(employee)} style={{cursor:'pointer'}}>\n              <th scope=\"row\">1</th>\n              <td>{employee.name}</td> \n              <td>{employee.email}</td>\n              <td>{employee.phone}</td>\n              <td>{typeof(employee.birthday) === 'object' ? employee.birthday.toLocaleDateString(\"es-MX\") : new Date(employee.birthday).toLocaleDateString() }</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n    </div>\n  );\n}\nexport default Table;","/*\n * Employee Constants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const CHANGE_NAME = 'ps/EmployeesPage/CHANGE_NAME';\nexport const CHANGE_EMAIL = 'ps/EmployeesPage/CHANGE_EMAIL';\nexport const CHANGE_PHONE = 'ps/EmployeesPage/CHANGE_PHONE';\nexport const CHANGE_BIRTHDAY = 'ps/EmployeesPage/CHANGE_BIRTHDAY';\nexport const CHANGE_CODE = 'ps/EmployeesPage/CHANGE_CODE';\nexport const CHANGE_STATUS = 'ps/EmployeesPage/CHANGE_STATUS';\nexport const CHANGE_FORM_VISIBILITY = 'ps/EmployeesPage/CHANGE_FORM_VISIBILITY';\nexport const CHANGE_UPDATE_FORM_VISIBILITY = 'ps/EmployeesPage/CHANGE_UPDATE_FORM_VISIBILITY';\nexport const CREATE_EMPLOYEE = 'ps/EmployeesPage/CREATE_EMPLOYEE';\nexport const CHANGE_FILTERTEXT = 'ps/EmployeesPage/CHANGE_FILTERTEXT';\nexport const UPDATE_EMPLOYEE = 'ps/EmployeesPage/UPDATE_EMPLOYEE';\nexport const CHANGE_EMPLOYEE_NAME = 'ps/EmployeesPage/CHANGE_EMPLOYEE_NAME';\nexport const CHANGE_EMPLOYEE_EMAIL = 'ps/EmployeesPage/CHANGE_EMPLOYEE_EMAIL';\nexport const CHANGE_EMPLOYEE_PHONE = 'ps/EmployeesPage/CHANGE_EMPLOYEE_PHONE';\nexport const CHANGE_EMPLOYEE_BIRTHDAY = 'ps/EmployeesPage/CHANGE_EMPLOYEE_BIRTHDAY';\nexport const RESET_CREATE_EMPL_FORM = 'ps/EmployeesPage/RESET_CREATE_EMPL_FORM';\nexport const LOAD_EMPLOYEES = 'ps/EmployeesPage/LOAD_EMPLOYEES';","/*\n * Employee Actions\n *\n * Actions change things in your application\n * Since this boilerplate uses a uni-directional data flow, specifically redux,\n * we have these actions which are the only way your application interacts with\n * your application state. This guarantees that your state is up to date and nobody\n * messes it up weirdly somewhere.\n *\n * To add a new Action:\n * 1) Import your constant\n * 2) Add a function like this:\n *    export function yourAction(var) {\n *        return { type: YOUR_ACTION_CONSTANT, var: var }\n *    }\n */\n\nimport { \n  CHANGE_NAME, \n  CHANGE_EMAIL, \n  CHANGE_PHONE, \n  CHANGE_BIRTHDAY, \n  CHANGE_FORM_VISIBILITY, \n  CREATE_EMPLOYEE,\n  CHANGE_FILTERTEXT,\n  CHANGE_UPDATE_FORM_VISIBILITY,\n  UPDATE_EMPLOYEE,\n  CHANGE_EMPLOYEE_NAME,\n  CHANGE_EMPLOYEE_EMAIL,\n  CHANGE_EMPLOYEE_PHONE,\n  CHANGE_EMPLOYEE_BIRTHDAY,\n  RESET_CREATE_EMPL_FORM,\n  COMPONENT_DID_MOUNT,\n  LOAD_EMPLOYEES,\n} from './constants';\n\n/**\n * Changes the input field of the form\n *\n * @param  {string} name The new text of the input field\n * @param  {string} email The new text of the input field\n * @param  {string} phone The new text of the input field\n * @param  {date} birthday The new text of the input field\n * @param  {boolean} isEmplFormVisible The new text of the input field\n * @param  {object} newEmplData The new text of the input field\n * @param  {string} filterText The new text of the input field\n * @param  {boolean} isUpdteEmplFormVisible The new text of the input field\n * @return {object} An action object\n */\nexport function changeName(name) {\n  return {\n    type: CHANGE_NAME,\n    name,\n  };\n}\n\nexport function changeEmail(email) {\n  return {\n    type: CHANGE_EMAIL,\n    email,\n  };\n}\n\nexport function changePhone(phone) {\n  return {\n    type: CHANGE_PHONE,\n    phone,\n  };\n}\n\nexport function changeBirthday(birthday) {\n  return {\n    type: CHANGE_BIRTHDAY,\n    birthday,\n  };\n}\n\nexport function changeFormVisibility(isEmplFormVisible) {\n  return {\n    type: CHANGE_FORM_VISIBILITY,\n    isEmplFormVisible,\n  };\n}\n\nexport function changeUpdteFormVisibility(emplData) {\n  return {\n    type: CHANGE_UPDATE_FORM_VISIBILITY,\n    emplData,\n  };\n}\n\nexport function createEmployee(newEmplData) {\n  return {\n    type: CREATE_EMPLOYEE,\n    newEmplData,\n  };\n}\n\nexport function changeFilterText(filterText) {\n  return {\n    type: CHANGE_FILTERTEXT,\n    filterText,\n  };\n}\n\nexport function updateEmployee(updatedEmployee) {\n  return {\n    type: UPDATE_EMPLOYEE,\n    updatedEmployee,\n  };\n}\n\nexport function changeUpdateEmployee(type, newValue) {\n  switch (type) {\n    case \"name\":\n      return { type: CHANGE_EMPLOYEE_NAME, newValue};\n    case 'email':\n      return { type: CHANGE_EMPLOYEE_EMAIL, newValue};\n    case 'phone':\n      return { type: CHANGE_EMPLOYEE_PHONE, newValue};\n    default:\n      return { type: CHANGE_EMPLOYEE_BIRTHDAY, newValue};\n  }\n}\n\nexport function resetCreateEmplForm() {\n  return {\n    type: RESET_CREATE_EMPL_FORM,\n  };\n}\n\nexport function loadEmployees(data) {\n  console.log(\"actions ssss\");\n  return {\n    type: LOAD_EMPLOYEES,\n    data,\n  };\n}","/*\n * EmployeeReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\nimport { \n  CHANGE_NAME, \n  CHANGE_EMAIL, \n  CHANGE_PHONE, \n  CHANGE_BIRTHDAY, \n  CHANGE_FORM_VISIBILITY, \n  CREATE_EMPLOYEE,\n  CHANGE_FILTERTEXT, \n  CHANGE_UPDATE_FORM_VISIBILITY,\n  UPDATE_EMPLOYEE,\n  CHANGE_EMPLOYEE_NAME,\n  CHANGE_EMPLOYEE_EMAIL,\n  CHANGE_EMPLOYEE_PHONE,\n  CHANGE_EMPLOYEE_BIRTHDAY,\n  RESET_CREATE_EMPL_FORM,\n  LOAD_EMPLOYEES,\n} from './constants';\n\n// The initial state of the App\nexport const initialState = {\n  name: '',\n  email: '',\n  phone: '',\n  birthday: new Date(),\n  isEmplFormVisible: false,\n  isUpdteEmplFormVisible: false,\n  employees: [],\n  filterText: '',\n  selectedEmplForUpdate: undefined,\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst EmployeeReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case CHANGE_NAME:\n        draft.name = action.name;\n        break;\n      case CHANGE_EMAIL:\n        draft.email = action.email;\n        break;\n      case CHANGE_PHONE:\n        draft.phone = action.phone;\n        break;\n      case CHANGE_BIRTHDAY:\n        draft.birthday = action.birthday;\n        break;\n      case CHANGE_FORM_VISIBILITY:\n        draft.isEmplFormVisible = !draft.isEmplFormVisible;\n        break;\n      case CREATE_EMPLOYEE:\n        draft.employees = draft.employees.concat([action.newEmplData]);\n        break;\n      case RESET_CREATE_EMPL_FORM:\n        draft.isEmplFormVisible = false;\n        draft.name = '';\n        draft.phone = '';\n        draft.email = '';\n        draft.birthday = new Date();\n        break;\n      case CHANGE_FILTERTEXT:\n        draft.filterText = action.filterText;\n        break;\n      case CHANGE_UPDATE_FORM_VISIBILITY:\n        draft.isUpdteEmplFormVisible = !draft.isUpdteEmplFormVisible\n        draft.selectedEmplForUpdate = action.emplData\n        break;\n      case UPDATE_EMPLOYEE:\n        let employees = draft.employees\n        let employeeIndex = employees.findIndex(employee => employee.name === draft.selectedEmplForUpdate.name)\n        console.log(employees[employeeIndex])\n        draft.employees[employeeIndex] = draft.selectedEmplForUpdate\n        draft.isEmplFormVisible = false;\n        draft.isUpdteEmplFormVisible = false;\n        break;\n      case CHANGE_EMPLOYEE_NAME:\n        draft.selectedEmplForUpdate.name = action.newValue\n        break;\n      case CHANGE_EMPLOYEE_EMAIL:\n        draft.selectedEmplForUpdate.email = action.newValue\n        break;\n      case CHANGE_EMPLOYEE_PHONE:\n        draft.selectedEmplForUpdate.phone = action.newValue\n        break;\n      case CHANGE_EMPLOYEE_BIRTHDAY:\n        draft.selectedEmplForUpdate.birthday = action.newValue\n        break;\n      case LOAD_EMPLOYEES:\n        console.log(\"employeeeeees\")\n        draft.employees = action.data;\n        break;\n    }\n  });\n\nexport default EmployeeReducer;","/**\n * EmployeesPage selectors\n */\n\nimport { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectEmployees = state => state.employees || initialState;\n\nconst makeSelectEmployees = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.employees,\n  );\n\n\nconst makeSelectName = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.name,\n  );\n\nconst makeSelectEmail = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.email,\n  );\n\nconst makeSelectPhone = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.phone,\n  );\n\nconst makeSelectBirthday = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.birthday,\n  );\n\nconst makeSelectEmplFormVisibility = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.isEmplFormVisible,\n  );\n\nconst makeSelectFilterText = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.filterText,\n  );\n\nconst makeSelectEmployees2 = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.employees.filter(employee =>    employee.name.startsWith(employeesState.filterText)),\n  );\n\nconst makeSelectUpdteEmplFormVisibility = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.isUpdteEmplFormVisible,\n  );\n\nconst makeSelectToUpdteEmployee = () =>\n  createSelector(\n    selectEmployees,\n    employeesState => employeesState.selectedEmplForUpdate,\n  );\n  \nexport { selectEmployees, makeSelectEmployees, makeSelectName, makeSelectEmail, makeSelectPhone, makeSelectBirthday, makeSelectEmplFormVisibility, makeSelectFilterText, makeSelectEmployees2, makeSelectUpdteEmplFormVisibility, makeSelectToUpdteEmployee};","/**\n * Gets the repositories of the user from Github\n */\nimport { getServerUrl } from './../../utils/serverURL';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { CREATE_EMPLOYEE } from './constants';\nimport { makeSelectName, makeSelectEmail, makeSelectPhone, makeSelectBirthday } from './selectors';\nimport { resetCreateEmplForm, loadEmployees } from './actions';\nimport request from './../../utils/request';\n/**\n * \n */\nexport function* sagaSaveEmployee() {\n  // Select username from store\n  const name = yield select(makeSelectName());\n  const email = yield select(makeSelectEmail());\n  const phone = yield select(makeSelectPhone());\n  const birthday = yield select(makeSelectBirthday());\n\n\n  const requestURL = `${getServerUrl()}/employees`;\n\n  try {\n    const token = localStorage.getItem(\"PointOfSaleToken\")\n    const authResponse = yield call(request, requestURL, {\n      body: JSON.stringify({name: name, email: email, phone: phone, birthday: birthday}),\n      headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n      method: 'POST'\n    });\n    console.log(authResponse);\n\n    yield put(resetCreateEmplForm()); \n  } catch (err) {\n    console.log(\"err\")\n    console.log(err)\n  }\n}\n\nexport function* sagaLoadEmployees() {\n\n  console.log(\"saga employees\");\n\n  const requestURL = `${getServerUrl()}/employees`;\n\n  try {\n    const token = localStorage.getItem(\"PointOfSaleToken\")\n    const employeesResponse = yield call(request, requestURL, {\n      headers: {'Authorization': `Bearer ${token}`},\n    });\n\n    console.log(\"employees\")\n    console.log(employeesResponse)\n\n    yield put(loadEmployees(employeesResponse.data)); \n  } catch (err) {\n    console.log(\"err\")\n    console.log(err)\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* createEmployee() {\n  yield takeLatest(CREATE_EMPLOYEE, sagaSaveEmployee);\n}","import React, { memo, useEffect, useState } from 'react'\nimport axios from 'axios';\nimport Navbar from '../../components/Navbar'\nimport Img from './../../components/Img'\nimport Table from './../../components/Table'\nimport Banner from './Search.svg';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale, setDefaultLocale } from  \"react-datepicker\";\nimport es from 'date-fns/locale/es';\n\nimport PropTypes from 'prop-types';\n\nimport { getServerUrl } from './../../utils/serverURL';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { useInjectReducer } from './../../utils/injectReducer';\nimport { useInjectSaga } from './../../utils/injectSaga';\n\nimport { changeName, changeEmail, changePhone, changeBirthday, changeFormVisibility, createEmployee, changeFilterText, changeUpdteFormVisibility, updateEmployee, changeUpdateEmployee, loadEmployees } from './actions';\n\nimport { makeSelectEmployees ,makeSelectName, makeSelectEmail, makeSelectPhone, makeSelectBirthday, makeSelectEmplFormVisibility, makeSelectFilterText, makeSelectEmployees2, makeSelectUpdteEmplFormVisibility, makeSelectToUpdteEmployee } from './selectors';\n\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst key = 'employees';\n\nregisterLocale('es', es)\n\n\nconst Form =(props) => {\n  return (\n    <div className=\"row justify-content-center\" style={{marginTop:'5vh'}}>\n      <div className=\"col-4 card\">\n        <div className=\"card-body\" style={{textAlign:'left'}}>\n          <div className=\"form-group\">\n            <label>Nombre(s)</label>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Nombre(s)\" value={props.name} onChange={props.onChangeName}/>\n          </div>\n          <div className=\"form-group\">\n            <label>Email</label>\n            <input type=\"email\" className=\"form-control\" placeholder=\"Email\" value={props.email} onChange={props.onChangeEmail}/>\n          </div>\n          <div className=\"form-group\">\n            <label>Teléfono</label>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Teléfono\" value={props.phone} onChange={props.onChangePhone}/>\n          </div>\n          <div className=\"form-group\">\n            <label>Cumpleaños</label> <br/>\n            <DatePicker\n              locale=\"es\"\n              className=\"form-control\"\n              selected={new Date(props.birthday)}\n              onSelect={props.onChangeBirthday}\n              showMonthDropdown\n              showYearDropdown\n            />\n          </div>\n          <div className=\"btn btn-dark\" onClick={() => props.createEmployee(props.name, props.email, props.phone, props.birthday)}>\n            Crear\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst UpdateEmplForm = (props) => {\n  return(\n    <div className=\"row justify-content-center\" style={{marginTop:'5vh'}}>\n      <div className=\"col-4 card\">\n        <div className=\"card-body\" style={{textAlign:'left'}}>\n          <div className=\"form-group\">\n            <label>Nombre(s)</label>\n            <input name=\"updatedName\" type=\"text\" className=\"form-control\" placeholder=\"Nombre(s)\" value={props.employee.name} onChange={(evt) => props.onChangeUpdateEmpl(\"name\", evt.target.value)}/>\n          </div>\n          <div className=\"form-group\">\n            <label>Email</label>\n            <input name=\"updatedEmail\" type=\"email\" className=\"form-control\" placeholder=\"Email\" value={props.employee.email} />\n          </div>\n          <div className=\"form-group\">\n            <label>Teléfono</label>\n            <input name=\"updatedPhone\" type=\"text\" className=\"form-control\" placeholder=\"Teléfono\" value={props.employee.phone} />\n          </div>\n          <div className=\"form-group\">\n            <label>Cumpleaños</label> <br/>\n            <DatePicker\n              locale=\"es\"\n              name=\"updatedBirthday\"\n              className=\"form-control\"\n              selected={new Date(props.employee.birthday)}\n              showMonthDropdown\n              showYearDropdown\n            />\n          </div>\n          <div className=\"btn btn-dark\" onClick={props.updateEmploye}>\n            Actualizar\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport function EmployeesPage({\n  employees,\n  name, \n  email,\n  phone, \n  birthday,\n  isEmplFormVisible,\n  isUpdtEmplFormVisible,\n  filterText,\n  filteredEmployees,\n  toUpdteEmployee,\n  onChangeName,\n  onChangeEmail,\n  onChangePhone,\n  onChangeBirthday,\n  onChangeEmplFormVisibility,\n  onChangeUpdateFormVisibility,\n  createEmployee,\n  onChangeFilterText,\n  onChangeUpdateEmpl,\n  onLoadEmployees,\n}) {\n\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  useEffect(() => {\n\n    const requestURL = `${getServerUrl()}/employees`;\n    try {\n      const token = localStorage.getItem(\"PointOfSaleToken\")\n\n      axios.get(requestURL, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n      .then(({ data }) => {\n        onLoadEmployees(data.data);\n      });\n\n    } catch (err) {\n      console.log(\"err\")\n      console.log(err)\n    }\n\n  }, []);\n\n  return (\n    <div>\n      <Navbar is_active='employees'/>\n      <h1>Empleados</h1>\n      <div style={{position:'absolute', top:'64px', right:'320px'}}>\n      <div className=\"btn btn-dark\" onClick={onChangeEmplFormVisibility}>Crear empleado</div>\n      </div>\n      \n      <div style={{position:'absolute', top:'64px', right:'8px', width:'240px'}}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\"><Img src={Banner} alt=\"desc\" style={{width:'16px', heigth: '100%'}}/></span>\n            </div>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Buscar\" value={filterText} onChange={onChangeFilterText} />\n          </div>\n      </div>\n\n      { isEmplFormVisible ? \n        <Form \n          birthday={birthday} \n          name={name} \n          email={email} \n          phone={phone} \n          birthday={birthday} \n          onChangeName={onChangeName}\n          onChangeEmail={onChangeEmail}\n          onChangePhone={onChangePhone}\n          onChangeBirthday={onChangeBirthday}\n          createEmployee={createEmployee}\n          /> : isUpdtEmplFormVisible ? <UpdateEmplForm employee={toUpdteEmployee} updateEmploye={updateEmployee} onChangeUpdateEmpl={onChangeUpdateEmpl} /> : <Table employees={filterText === '' ? employees : filteredEmployees} onChangeUpdateFormVisibility={onChangeUpdateFormVisibility}/> }\n\n    </div>\n  )\n}\n\nEmployeesPage.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  phone: PropTypes.string,\n  birthday: PropTypes.instanceOf(Date),\n  isEmplFormVisible: PropTypes.bool,\n  onChangeEmplFormVisibility: PropTypes.func,\n  onChangeName: PropTypes.func,\n  onChangeEmail: PropTypes.func,\n  onChangePhone: PropTypes.func,\n  onChangeBirthday: PropTypes.func,\n  createEmployee: PropTypes.func,\n};\n\n\nconst mapStateToProps = createStructuredSelector({\n  name: makeSelectName(),\n  email: makeSelectEmail(),\n  phone: makeSelectPhone(),\n  birthday: makeSelectBirthday(),\n  isEmplFormVisible: makeSelectEmplFormVisibility(),\n  isUpdtEmplFormVisible: makeSelectUpdteEmplFormVisibility(),\n  employees: makeSelectEmployees(),\n  filterText: makeSelectFilterText(),\n  filteredEmployees: makeSelectEmployees2(),\n  toUpdteEmployee: makeSelectToUpdteEmployee(),\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    onChangeEmplFormVisibility: () => dispatch(changeFormVisibility()),\n    onChangeName: (evt) => dispatch(changeName(evt.target.value)),\n    onChangeEmail: (evt) => dispatch(changeEmail(evt.target.value)),\n    onChangePhone: (evt) => dispatch(changePhone(evt.target.value)),\n    onChangeBirthday: (date) => dispatch(changeBirthday(date)),\n    createEmployee: (name, email, phone, birthday) => dispatch(createEmployee({\n      name: name,\n      email: email,\n      phone: phone,\n      birthday: birthday,\n    })),\n    onChangeFilterText: (evt) => dispatch(changeFilterText(evt.target.value)),\n    onChangeUpdateFormVisibility: (emp) => dispatch(changeUpdteFormVisibility(emp)),\n    updateEmployee: () => dispatch(updateEmployee()),\n    onChangeUpdateEmpl: (type, value) => dispatch(changeUpdateEmployee(type, value)),\n    onLoadEmployees: (employees) => dispatch(loadEmployees(employees)),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\n\nexport default compose(\n  withConnect,\n  memo,\n)(EmployeesPage);","/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  return true;\n}","const getServerUrl = () => {\n  return \"https://e7c274ef.ngrok.io\";\n}\n\nexport { getServerUrl };","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from './../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  };\n}","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };","import React from 'react'\nimport { Redirect } from 'react-router';\nimport { Link } from \"react-router-dom\";\n\n\nclass Navbar extends React.Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      is_loggedIn: true,\n    }\n  }\n  \n\n  render(){\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        {this.state.is_loggedIn ? null : <Redirect to=\"/PS/login\" /> }\n        <a className=\"navbar-brand\" href=\"#\">PS</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className={(this.props.is_active === 'dashboard') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/dashboard\">Dashboard</a>\n            </li>\n            <li className={(this.props.is_active === 'employees') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/employees\">Employees</a>\n            </li>\n            <li className={(this.props.is_active === 'product') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/ultimate\">Products</a>\n            </li>\n            <li className={(this.props.is_active === 'analytics') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/analytics\">Analytics</a>\n            </li>\n            <li className={(this.props.is_active === 'flow') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/flow\">Flujo</a>\n            </li>\n            <li className={(this.props.is_active === 'cash') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/cash\">Caja</a>\n            </li>\n          </ul>\n          <span className=\"navbar-text\" style={{cursor: \"pointer\"}} onClick={() => {\n            localStorage.removeItem(\"PointOfSaleToken\");\n           this.setState({is_loggedIn: false});\n          }}>\n            Cerrar Sesión\n          </span>\n        </div>\n      </nav>\n    )\n  }\n\n}\n\nexport default Navbar;\n\n","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nexport const DAEMON = '@@saga-injector/daemon';\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\n\nimport checkStore from './checkStore';\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n  invariant(\n    isString(key) && !isEmpty(key),\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\n  );\n\nconst checkDescriptor = descriptor => {\n  const shape = {\n    saga: isFunction,\n    mode: mode => isString(mode) && allowedModes.includes(mode),\n  };\n  invariant(\n    conformsTo(descriptor, shape),\n    '(src/utils...) injectSaga: Expected a valid saga descriptor',\n  );\n};\n\nexport function injectSagaFactory(store, isValid) {\n  return function injectSaga(key, descriptor = {}, args) {\n    if (!isValid) checkStore(store);\n\n    const newDescriptor = {\n      ...descriptor,\n      mode: descriptor.mode || DAEMON,\n    };\n    const { saga, mode } = newDescriptor;\n\n    checkKey(key);\n    //checkDescriptor(newDescriptor);\n\n    let hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      const oldDescriptor = store.injectedSagas[key];\n      // enable hot reloading of daemon and once-till-unmount sagas\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (\n      !hasSaga ||\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n    ) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = {\n        ...newDescriptor,\n        task: store.runSaga(saga, args),\n      };\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      const descriptor = store.injectedSagas[key];\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel();\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\n        }\n      }\n    }\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true),\n  };\n}\n","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };"],"sourceRoot":""}
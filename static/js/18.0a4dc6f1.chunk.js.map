{"version":3,"sources":["containers/DashboardPage/index.js","utils/checkStore.js","utils/reducerInjectors.js","utils/injectReducer.js","components/Navbar/index.js"],"names":["mapStateToProps","createStructuredSelector","mapDispatchToProps","dispatch","withConnect","connect","compose","memo","Navbar","is_active","checkStore","store","injectReducerFactory","isValid","key","reducer","invariant","isString","isEmpty","isFunction","Reflect","has","injectedReducers","replaceReducer","createReducer","getInjectors","injectReducer","useInjectReducer","context","React","useContext","ReactReduxContext","useEffect","props","state","is_loggedIn","className","this","to","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","style","cursor","onClick","localStorage","removeItem","setState","Component"],"mappings":"4NAAA,mDAWA,IAeMA,EAAkBC,YAAyB,IAG1C,SAASC,EAAmBC,GACjC,MAAO,GAGT,IAAMC,EAAcC,YAClBL,EACAE,GAIaI,sBACbF,EACAG,OAFaD,EA1BO,WAElB,OACE,6BACE,kBAACE,EAAA,EAAD,CAAQC,UAAU,mB,gCCdX,SAASC,EAAWC,GACjC,OAAO,EAJT,mC,0ICMO,SAASC,EAAqBD,EAAOE,GAC1C,OAAO,SAAuBC,EAAKC,GAC5BF,GAASH,YAAWC,GAEzBK,IACEC,mBAASH,KAASI,kBAAQJ,IAAQK,qBAAWJ,GAC7C,6EAKAK,QAAQC,IAAIV,EAAMW,iBAAkBR,IACpCH,EAAMW,iBAAiBR,KAASC,IAIlCJ,EAAMW,iBAAiBR,GAAOC,EAC9BJ,EAAMY,eAAeC,YAAcb,EAAMW,qBAI9B,SAASG,EAAad,GAGnC,OAFAD,YAAWC,GAEJ,CACLe,cAAed,EAAqBD,GAAO,I,kCClBhC,IAwBTgB,EAAmB,SAAC,GAAsB,IAApBb,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QACzBa,EAAUC,IAAMC,WAAWC,KACjCF,IAAMG,WAAU,WACdP,EAAaG,EAAQjB,OAAOe,cAAcZ,EAAKC,KAC9C,M,mGCpCCP,E,YAEJ,WAAYyB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,aAAa,GAJE,E,sEASV,IAAD,OACN,OACE,yBAAKC,UAAU,+CACZC,KAAKH,MAAMC,YAAc,KAAO,kBAAC,IAAD,CAAUG,GAAG,cAC9C,uBAAGF,UAAU,eAAeG,KAAK,KAAjC,MACA,4BAAQH,UAAU,iBAAiBI,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC5J,0BAAMT,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BU,GAAG,cAC3C,wBAAIV,UAAU,sBACZ,wBAAIA,UAAqC,cAAzBC,KAAKJ,MAAMxB,UAA6B,kBAAoB,YAC1E,uBAAG2B,UAAU,WAAWG,KAAK,iBAA7B,cAEF,wBAAIH,UAAqC,cAAzBC,KAAKJ,MAAMxB,UAA6B,kBAAoB,YAC1E,uBAAG2B,UAAU,WAAWG,KAAK,iBAA7B,cAEF,wBAAIH,UAAqC,YAAzBC,KAAKJ,MAAMxB,UAA2B,kBAAoB,YACxE,uBAAG2B,UAAU,WAAWG,KAAK,gBAA7B,aAEF,wBAAIH,UAAqC,cAAzBC,KAAKJ,MAAMxB,UAA6B,kBAAoB,YAC1E,uBAAG2B,UAAU,WAAWG,KAAK,iBAA7B,cAEF,wBAAIH,UAAqC,SAAzBC,KAAKJ,MAAMxB,UAAwB,kBAAoB,YACrE,uBAAG2B,UAAU,WAAWG,KAAK,YAA7B,UAEF,wBAAIH,UAAqC,SAAzBC,KAAKJ,MAAMxB,UAAwB,kBAAoB,YACrE,uBAAG2B,UAAU,WAAWG,KAAK,YAA7B,UAGJ,0BAAMH,UAAU,cAAcW,MAAO,CAACC,OAAQ,WAAYC,QAAS,WACjEC,aAAaC,WAAW,oBACzB,EAAKC,SAAS,CAACjB,aAAa,MAF7B,0B,GAxCWN,IAAMwB,WAqDZ7C","file":"static/js/18.0a4dc6f1.chunk.js","sourcesContent":["import React, { memo } from 'react'\nimport Navbar from '../../components/Navbar'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useInjectReducer } from './../../utils/injectReducer';\nimport { changeSignOutState } from './actions';\nimport { makeSelectIsSigningOut } from './selectors';\nimport reducer from './reducer';\n\nconst key = 'dashboard';\n\nconst DashboardPage = () => {\n\n    return (\n      <div>\n        <Navbar is_active='dashboard' />\n      </div>\n    )\n}\n\nDashboardPage.propTypes = {\n};\n\n\nconst mapStateToProps = createStructuredSelector({\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {};\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\n\nexport default compose(\n  withConnect,\n  memo,\n)(DashboardPage);\n","/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  return true;\n}","import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from './../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      '(src/utils...) injectReducer: Expected `reducer` to be a reducer function',\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  };\n}","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };","import React from 'react'\nimport { Redirect } from 'react-router';\nimport { Link } from \"react-router-dom\";\n\n\nclass Navbar extends React.Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      is_loggedIn: true,\n    }\n  }\n  \n\n  render(){\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        {this.state.is_loggedIn ? null : <Redirect to=\"/PS/login\" /> }\n        <a className=\"navbar-brand\" href=\"#\">PS</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className={(this.props.is_active === 'dashboard') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/dashboard\">Dashboard</a>\n            </li>\n            <li className={(this.props.is_active === 'employees') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/employees\">Employees</a>\n            </li>\n            <li className={(this.props.is_active === 'product') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/ultimate\">Products</a>\n            </li>\n            <li className={(this.props.is_active === 'analytics') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/analytics\">Analytics</a>\n            </li>\n            <li className={(this.props.is_active === 'flow') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/flow\">Flujo</a>\n            </li>\n            <li className={(this.props.is_active === 'cash') ? 'nav-item active' : 'nav-item'}>\n              <a className=\"nav-link\" href=\"/PS/cash\">Caja</a>\n            </li>\n          </ul>\n          <span className=\"navbar-text\" style={{cursor: \"pointer\"}} onClick={() => {\n            localStorage.removeItem(\"PointOfSaleToken\");\n           this.setState({is_loggedIn: false});\n          }}>\n            Cerrar Sesi√≥n\n          </span>\n        </div>\n      </nav>\n    )\n  }\n\n}\n\nexport default Navbar;\n\n"],"sourceRoot":""}